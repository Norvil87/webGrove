import { ICourseLesson } from "../../../types";

export const HtmlIntro: ICourseLesson = {
  id: 1,
  title: "Язык разметки HTML",
  url: "html-intro",
  excercises: [
    {
      id: 1,
      header: "HTML - язык гипертекстовой разметки",
      url: "html-hypertext",
      theory: ` <p>Добро пожаловать в Ваше первое упражнение. Шаг за шагом мы вместе пройдем непростой, но интересный путь вэб-разработки. И начнем мы его с изучения языка разметки вэб-страниц -  <b>HTML</b>.</p>
          <p>В ходе упражнений редактируйте код прямо во встроенном редакторе кода в средней части страницы. Сейчас редактор пустой, но скоро мы это изменим:)</p>
          <p>Зачем нужно изучить HTML? HTML - скелет вэб-страниц, это тот контент, который вы видите, открывая сайт в Интернете. Изучение HTML может быть полезно не только начинающим разработчикам, но и SEO специалистам, маркетологам, дизайнерам и многим другим. С HTML разметки начинается разработка сайта, вэб-приложения, новостной Интернет рассылки и т.д.</p>
          <p>HTML описывает только структуру контента страницы, за ее внешний вид отвечает язык стилей CSS, а за поведение - язык программирования Javascript. С этими технологиями мы познакомимся позже.</p>
          <p>HTML - это язык гипертекстовой разметки (HyperText Markup Language). Язык разметки означает, что необработанный текст находится внутри HTML элементов, которые и формируют структуру разметки. Гипертекст - это текст, который предоставляет доступ к другому тексту через систему ссылок (или гиперссылок).</p>
          <p>Итак, приступим к первому испытанию. Ваша задача обозначена ниже. Результат вашей работы будет отображаться в мини-браузере в правой части страницы. После выполнения всех целей испытания (да и в любой момент) вы можете проверить решение, нажав на кнопку "Запустить код". Когда задача будет выполнена, смело переходите к следующему испытанию.</p>`,
      goal: `Скопируйте в редактор кода строку: <pre><code><span class="tag">&lt;p></span>Завтра начну изучать вэб-разработку!<span class="tag">&lt;/p></span></code></pre>.`,
      initValues: {
        html: "",
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: 'Элемент <code>p</code> должен содержать текст: "Завтра начну изучать вэб-разработку!".',
          test: (iframe: HTMLIFrameElement) => {
            const p = iframe.contentDocument.body.querySelector("p");
            return p && p.textContent === "Завтра начну изучать вэб-разработку!";
          },
          failMsg: '"Убедитесь, что элемент <p> содержит текст "Завтра начну изучать вэб-разработку!"',
        },
      ],
      solution: `<p>Завтра начну изучать вэб-разработку!</p>`,
    },
    {
      id: 2,
      header: "Поздороваемся с HTML элементами",
      url: "html-elements",
      theory: `<p>В прошлом испытании мы вставили в редактор строку:</p>

  <pre><code><span class="tag">&lt;p></span>Завтра начну изучать вэб-разработку!<span class="tag">&lt;/p></span></code></pre>

         <p>Это ваш первый <i>HTML элемент</i>. HTML элементы Вы можете узнать по открывающим и закрывающим тэгам.</p>
         <p>Вот так выглядит открывающий тэг: <code><span><</span>p></code>.</p>
         <p>А так закрывающий: <code><span><</span>/p></code>.</p>
         <p>В закрывающем тэге после открывающей скобки стоит прямой слэш, вот и вся разница между ними.</p>
         <p>Текст, который находится между открывающим и закрывающим тэгами называется контентом или содержимым HTML элемента.</p>
         <p>Кстати, элемент <code>p</code> - это не что иное как параграф (<i>paragraph</i>), и служит он для того же, для чего параграф в обычной книге или статье - для отображения небольшого объема структурно связанного текста.</p>`,
      goal: `Начните работу с HTML элементами.`,
      initValues: {
        html: "<p>Завтра начну изучать вэб-разработку!</p>",
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: 'В первом параграфе измените текст на: "Пожалуй, начну изучать вэб-разработку сегодня!"',
          test: (iframe: HTMLIFrameElement) => {
            const firstP = iframe.contentDocument.body.querySelectorAll("p")[0];

            return firstP && firstP.textContent === "Пожалуй, начну изучать вэб-разработку сегодня!";
          },
          failMsg: 'Убедитесь, что текст внутри первого параграфа - "Пожалуй, начну изучать вэб-разработку сегодня!"',
        },
        {
          id: 2,
          label: 'Добавьте второй параграф с текстом: "Начну с основ HTML"',
          test: (iframe: HTMLIFrameElement) => {
            const secondP = iframe.contentDocument.body.querySelectorAll("p")[1];

            return secondP && secondP.textContent === "Начну с основ HTML";
          },
          failMsg: 'Убедитесь, что текст внутри второго параграфа - "Начну с основ HTML"',
        },
      ],
      solution: `<p>Пожалуй, начну изучать вэб-разработку сегодня!</p>
<p>Начну с основ HTML</p>`,
    },

    {
      id: 3,
      header: "Вложенность элементов",
      url: "html-nesting",
      theory: `<p>HTML представляет собой древовидную структуру. Это значит, что одни элементы могут быть вложены в другие. В качестве примера рассмотрим эту простую разметку:</p>

<pre><code><span class="tag">&lt;main></span>
  <span class="tag">&lt;p></span>Этот параграф является потомком элемента main<span class="tag">&lt;/p></span>
<span class="tag">&lt;/main></span></code></pre>

         <p>В этом примере элемент <code>main</code> является родителем элемента <code>p</code>, а элемент <code>p</code> в свою очередь - потомком <code>main</code>. Визуально в разметке потомок имеет отступ в 2 пробельных символа от своего родителя.</p>
         <p>Уровней вложенности элементов может быть сколь угодно много. Вот пример разметки посложнее:</p>

<pre><code><span class="tag">&lt;main></span>
  <span class="tag">&lt;div></span>
    <span class="tag">&lt;p></span>Этот параграф является потомком элемента div и имеет соседа справа - элемент span<span class="tag">&lt;/p></span>
    <span class="tag">&lt;span></span>Элемент span также является потомком div и имеет соседа слева - элемент p<span class="tag">&lt;/span></span>
  <span class="tag">&lt;/div></span>
<span class="tag">&lt;/main></span></code></pre>

         <p>В этом примере элемент <code>div</code> является потомком элемента <code>main</code>, а элементы <code>p</code> и <code>span</code> - оба потомки <code>div</code>. Таким образом в данном примере присутствует тройная вложенность элементов. Кроме этого, элементы <code>p</code> и <code>span</code> являются соседями друг для друга.</p>
         <p>Структура вложенностей создает <b>иерархию</b> элементов.</p>
         <p>Понимание иерархии элементов очень важно, поскольку элементы-потомки могут наследовать свойства от элементов-родителей. Подробнее о том, как это происходит, вы узнаете в курсе по CSS.</p>`,
      goal: `Оберните созданные на прошлом задании параграфы в div.`,
      initValues: {
        html: `<main>
  <div>
    <span>Этот элемент уже обернут в div</span>
  </div>

  <p>Пожалуй, начну изучать вэб-разработку сегодня!</p>
  <p>Начну с основ HTML</p>
  
</main>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: "Добавьте второй элемент <code>div</code>",
          test: (iframe: HTMLIFrameElement) => {
            const divs = iframe.contentDocument.body.querySelectorAll("div");

            return divs.length === 2;
          },
          failMsg: "Убедитесь, что на странице 2 элемента div",
        },
        {
          id: 2,
          label: "У второго элемента <code>div</code> должно быть 2 элемента-потомка <code>p</code>",
          test: (iframe: HTMLIFrameElement) => {
            const secondDiv = iframe.contentDocument.body.querySelectorAll("div")[1];
            return (
              secondDiv &&
              secondDiv.children &&
              secondDiv.children.length === 2 &&
              secondDiv.children[0].tagName === "P" &&
              secondDiv.children[1].tagName === "P"
            );
          },
          failMsg: "Убедитесь, что во второй div вложены 2 параграфа p",
        },
      ],
      solution: `<main>
  <div>
    <span>Этот элемент уже обернут в тэг div</span>
  </div>
  <div>
    <p>Пожалуй, начну изучать вэб-разработку сегодня!</p>
    <p>Начну с основ HTML</p>
  </div>
</main>`,
    },

    {
      id: 4,
      header: "Заголовки - элементы h1-h6",
      url: "html-headers",
      theory: `<p>Заголовки в HTML служат той же цели, что и заголовки в любых других средствах массовой информации - привлечь внимание читателя и кратко описать контент под ними. Заголовки, как правило, выделяются бОльшим размером шрифта, чем основной контент, и жирным начертанием.</p>
         <p>В HTML 6 уровней заголовков: <code>h1, h2, h3, h4, h5, h6</code>. <code>h</code> - это заголовок (<i>header</i>).</p>
         <p><code>h1</code> - заголовок первого уровня, он главный на странице. Заголовок первого уровня должен быть один, так как он описывает содержание страницы целиком. Остальные заголовки описывают более мелкие структурные части страницы, их может быть любое количество.</p>
         <p>Обратите внимание, что уровни заголовков должны находится в иерархической структуре, то есть заголовок <code>h2</code> может включать в себя один или несколько заголовков <code>h3</code>, но заголовок <code>h3</code> не должен включать в себя заголовок <code>h2</code>, так как это нарушает структуру контента страницы.</p>
         <p>Вот пример заголовка на странице:</p>

<pre><code><span class="tag">&lt;h2></span>Каталог товаров<span class="tag">&lt;/h2></span></code></pre>`,
      goal: `Добавьте на страницу еще несколько заголовков. Следите за тем, чтобы каждому открывающему тэгу соответствовал закрывающий.`,
      initValues: {
        html: `<h1>Москва</h1>
<h2>Культура</h2>
<h3>Музеи</h3>
<h3>Театры</h3>
<!--Начните добавлять заголовки ниже этой линии-->`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Добавьте заголовок второго уровня <code>h2</code> с текстом "Отдых"`,
          test: (iframe: HTMLIFrameElement) => {
            const headers = iframe.contentDocument.body.querySelectorAll("h2");
            return headers.length === 2 && headers[1].textContent === "Отдых";
          },

          failMsg: `Убедитесь, что внутри второго заголовка h2 содержится текст "Отдых"`,
        },
        {
          id: 2,
          label: `Ниже добавьте заголовок третьего уровня <code>h3</code> с текстом "Парки"`,
          test: (iframe: HTMLIFrameElement) => {
            const secondH2 = iframe.contentDocument.body.querySelectorAll("h2")[1];
            return (
              secondH2 &&
              secondH2.nextElementSibling &&
              secondH2.nextElementSibling.tagName === "H3" &&
              secondH2.nextElementSibling.textContent === "Парки"
            );
          },
          failMsg: `Убедитесь, что после заголовка h2 "Отдых" следует заголовок h3 с текстом "Парки"`,
        },
        {
          id: 3,
          label: `Ниже добавьте еще один заголовок третьего уровня с текстом "Кинотеатры"`,
          test: (iframe: HTMLIFrameElement) => {
            const h3 = Array.from(iframe.contentDocument.body.querySelectorAll("h3")).find(
              header => header.textContent === "Парки"
            );
            return (
              h3 &&
              h3.nextElementSibling &&
              h3.nextElementSibling.tagName === "H3" &&
              h3.nextElementSibling.textContent === "Кинотеатры"
            );
          },
          failMsg: `Убедитесь, что после заголовка h3 "Парки" следует заголовок h3 с текстом "Кинотеатры"`,
        },
      ],
      solution: `<h1>Москва</h1>
<h2>Культура</h2>
<h3>Музеи</h3>
<h3>Театры</h3>
<h2>Отдых</h2>
<h3>Парки</h3>
<h3>Кинотеатры</h3>`,
    },

    {
      id: 5,
      header: "Универсальный контейнер - элемент div",
      url: "html-div",
      theory: `<p>Элемент <code>div</code> является универсальным контейнером HTML страницы, он нужен для группировки элементов. Мы уже встречались с этим элементом в упражнении на вложенность тэгов. Вот пример разметки с использованием <code>div</code>:</p>
        
<pre><code><span class="tag">&lt;main></span>
  <span class="tag">&lt;div></span>
    <span class="tag">&lt;p></span>Любые элементы можно группировать<span class="tag">&lt;/p></span>
    <span class="tag">&lt;span></span>с помощью элемента div<span class="tag">&lt;/span></span>
  <span class="tag">&lt;/div></span>
<span class="tag">&lt;/main></span></code></pre>

        <p>Элемент <code>div</code> никак визуально не отображается на странице. Он участвует в передаче пользовательских стилей дочерним элементам, а также создает раскладку блоков на странице. Все это будет наглядно показано в курсе по CSS.</p>
        <p>Вообще, <code>div</code> - это, пожалуй, самый часто используемый HTML элемент, поэтому давайте потренируемся в его применении.</p>`,
      goal: `Оберните ваши заголовки в <code>div</code>.  Не забывайте делать отступы в 2 пробельных символа для вложенных элементов. Это нужно для лучшей читаемости.`,
      initValues: {
        html: `<h1>Москва</h1>

<h2>Культура</h2>
<h3>Музеи</h3>
<h3>Театры</h3>


<h2>Отдых</h2>
<h3>Парки</h3>
<h3>Кинотеатры</h3>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Группа заголовков <b>"Культура"</b>, <b>"Музеи"</b>, <b>"Театры"</b> должна быть обернута в <code>div</code>.`,
          test: (iframe: HTMLIFrameElement) => {
            const firstDiv = iframe.contentDocument.body.querySelectorAll("div")[0];
            return (
              firstDiv &&
              firstDiv.children.length === 3 &&
              firstDiv.children[0].tagName === "H2" &&
              firstDiv.children[1].tagName === "H3" &&
              firstDiv.children[2].tagName === "H3"
            );
          },
          failMsg: `Убедитесь, что внутри первого элемента div находятся заголовки - Культура, Музеи, Театры`,
        },
        {
          id: 2,
          label: `Группа заголовков <b>"Отдых"</b>, <b>"Парки"</b>, <b>"Кинотеатры"</b> должна быть обернута в <code>div</code>.`,
          test: (iframe: HTMLIFrameElement) => {
            const secondDiv = iframe.contentDocument.body.querySelectorAll("div")[1];
            return (
              secondDiv &&
              secondDiv.children.length === 3 &&
              secondDiv.children[0].tagName === "H2" &&
              secondDiv.children[1].tagName === "H3" &&
              secondDiv.children[2].tagName === "H3"
            );
          },
          failMsg: `Убедитесь, что внутри второго элемента div находятся заголовки - Отдых, Парки, Кинотеатры`,
        },
      ],
      solution: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <h3>Театры</h3>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
    },

    {
      id: 6,
      header: "Отображение текста - элементы p и span",
      url: "html-p-span",
      theory: `<p>Текст на странице составляет большую часть контента (да простят меня любители фотографий котиков). Для его отображения используются элементы <code>p</code> и <code>span</code>.</p>
        <p>С параграфами <code>p</code> мы уже поработали, они служат для структурирования и отображения блоков текста.</p>
        <p>С помощью <code>span</code> выделяют отдельные текстовые элементы - слова и фразы, которые находятся на той же строке, что и остальной текст. Вот пример разметки, где эти элементы используются совместно:</p>
        
<pre><code><span class="tag">&lt;div></span>
  <span class="tag">&lt;p></span>В этом параграфе одно <span class="tag">&lt;span></span>слово<span class="tag">&lt;/span></span> выделено с помощью span<span class="tag">&lt;/p></span>
<span class="tag">&lt;/div></span></code></pre>

        <p>В этой разметке мы отделили слово <b>слово</b> от остального текста с помощью элемента <code>span</code>. Позже мы могли бы применть к этому слову какие-нибудь отдельные стили, например вывести его красным цветом.</p>
        <p>Повторим - если вам нужно вывести на экран блок структурированного текста, используйте параграф <code>p</code>. Если вам нужно выделить слово или фразу в пределах блока текста, используйте <code>span</code>.</p>`,
      goal: `Добавьте на страницу текстовую информацию.`,
      initValues: {
        html: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>

  <h3>Театры</h3>

</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Под заголовком <b>"Музеи"</b> добавьте параграф с текстом <i>"В Москве огромное количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить хотя бы один раз в жизни."</i>`,
          test: (iframe: HTMLIFrameElement) => {
            const museumH3 = iframe.contentDocument.body.querySelectorAll("h3")[0];
            return (
              museumH3 &&
              museumH3.textContent === "Музеи" &&
              museumH3.nextElementSibling &&
              museumH3.nextElementSibling.tagName === "P" &&
              museumH3.nextElementSibling.textContent ===
                "В Москве огромное количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить хотя бы один раз в жизни."
            );
          },
          failMsg: `Убедитесь, что под заголовком Музеи расположен параграф с текстом`,
        },
        {
          id: 2,
          label: `Под заголовком <b>"Театры"</b> добавьте параграф с текстом <i>"Москва славится своими театрами не только на всю Россию, но и на весь мир. На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира."</i>`,
          test: (iframe: HTMLIFrameElement) => {
            const theaterH3 = iframe.contentDocument.body.querySelectorAll("h3")[1];
            return (
              theaterH3 &&
              theaterH3.textContent === "Театры" &&
              theaterH3.nextElementSibling &&
              theaterH3.nextElementSibling.tagName === "P" &&
              theaterH3.nextElementSibling.textContent ===
                "Москва славится своими театрами не только на всю Россию, но и на весь мир. На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира."
            );
          },
          failMsg: `Убедитесь, что под заголовком Театры расположен параграф с текстом`,
        },
        {
          id: 3,
          label: `В параграфе про театры оберните фразу <i>не только на всю Россию, но и на весь мир.</i> в элемент <code>span</code>.`,
          test: (iframe: HTMLIFrameElement) => {
            const span = iframe.contentDocument.body.querySelector("span");
            return span && span.textContent === "не только на всю Россию, но и на весь мир.";
          },
          failMsg: `Убедитесь, что на странице есть элемент span с текстом "не только на всю Россию, но и на весь мир."`,
        },
      ],
      solution: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве огромное количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить хотя бы один раз в жизни.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span> На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира.</p>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
    },

    {
      id: 7,
      header: "Смысловое выделение текста - элементы em и strong",
      url: "html-highlight",
      theory: `<p>Хотя для внешней стилизации текста используется CSS, существуют способы смыслового выделения текста с помощью HTML элементов. Мы рассмотрим 2 из них - элементы <code>em</code> и <code>strong</code>.</p>
        <p>Элемент <code>em</code> выделяет акцентируемый текст. Он может быть вложенным и каждый уровень вложенности показывает болушую степень акцента. Применяйте этот элемент для слов и выражений, которые имеют подчеркнутый акцент по сравлению с окружающим текстом. По умолчанию браузеры выделяют текст внутри этого элемента <em>курсивом</em>.</p>
        <p>Элемент <code>strong</code> показывает, что данное слово или выражение имеет бОльшую срочность, серьезность или значение, чем окружающий текст.  Им можно выделять, например, предупреждения. Браузеры обычно выделяют текст внутри этого элемента <strong>жирным</strong> шрифтом.</p>
        <p>Вот пример использования этих элементов в разметке:</p>

<pre><code><span class="tag">&lt;p></span>В Москве <span class="tag">&lt;strong></span>огромное<span class="tag">&lt;/strong></span> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <span class="tag">&lt;em></span>хотя бы один раз в жизни<span class="tag">&lt;/em></span>.<span class="tag">&lt;/p></span></code></pre>

        <p>Вот как этот текст будет выглядить на странице:</p>
        <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>`,
      goal: `Добавьте смысловое выделение отдельных фраз и выражений.`,
      initValues: {
        html: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span> На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира.</p>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `В параграфе про театры Москвы подчеркните, что театров в Москве много, сделав акцент на фразе "великое множество".`,
          test: (iframe: HTMLIFrameElement) => {
            const em = iframe.contentDocument.body.querySelectorAll("em")[1];
            return em && em.textContent === "великое множество";
          },
          failMsg: `Убедитесь, что фраза "великое множество" обернута в элемент em.`,
        },
        {
          id: 2,
          label: `В этом же параграфе укажите важность разнообразия постановок, выделив фразу "и классические и современные постановки.".`,
          test: (iframe: HTMLIFrameElement) => {
            const strong = iframe.contentDocument.body.querySelectorAll("strong")[1];
            return strong && strong.textContent === "и классические и современные постановки.";
          },
          failMsg: `Убедитесь, что фраза "и классические и современные постановки." обернута в элемент strong.`,
        },
      ],
      solution: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
    },

    {
      id: 8,
      header: "Разделение блоков разметки - элементы br и hr",
      url: "html-markup-splitting",
      theory: `<p>Если в вашем HTML коде вы поставите пробелы в тексте, они никак не отобразятся на странице, текст никуда не сдвинется (попробуйте). Существует несколько способов перенести текст на странице и один из них - использвание элемента <code>br</code>.</p>
        <p><code>br</code> - это символ переноса строки (возврата каретки), поставьте его в том месте, где необходимо перенести текст на новую строку. Этот элемент удобно применять, например, для отображения стихотворений или адреса, там, где важно разбить текст на строки.</p>
        <p>Элемент <code>hr</code> служит для тематического разделения абзацев. Браузер отрисует горизонтальную линию, которая визуально отделит один абзац от другого.</p>
        <p>Вот пример использования этих элементов в разметке на примере японского хокку:</p>

<pre><code><span class="tag">&lt;p></span>Друг мне в подарок прислал<span class="tag">&lt;br></span>Рису, а я его пригласил<span class="tag">&lt;br></span>В гости к самой луне.<span class="tag">&lt;hr></span> Глубокою стариной<span class="tag">&lt;br></span>Повеяло… Сад возле храма<span class="tag">&lt;br></span> Засыпан палым листом.<span class="tag">&lt;/p></span></code></pre>

        <p>Вот как этот текст будет выглядить на странице:</p>
        <p>Друг мне в подарок прислал<br>Рису, а я его пригласил<br>В гости к самой луне.<hr> Глубокою стариной<br>Повеяло… Сад возле храма<br>Засыпан палым листом.</p>
        <p>Обратите внимание, что оба элемента состоят только из одного тэга (так как не содержат внутри никакого контента).</p>`,
      goal: `Добавьте элементы разделения разметки.`,
      initValues: {
        html: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `В параграфе про театры Москвы второе предложение ("На сценах...") перенесите на следующую строку.`,
          test: (iframe: HTMLIFrameElement) => {
            const br = iframe.contentDocument.body.querySelector("br");
            return (
              br &&
              br.nextSibling &&
              br.nextSibling.textContent === " На сценах московских театров, которых насчитывается " &&
              br.previousSibling &&
              br.previousSibling.textContent === "не только на всю Россию, но и на весь мир."
            );
          },
          failMsg: `Убедитесь, что после фразы "но и на весь мир." стоит элемент br.`,
        },
        {
          id: 2,
          label: `Отчеркните параграф про театры Москвы с помощью горизонтальной черты.`,
          test: (iframe: HTMLIFrameElement) => {
            const hr = iframe.contentDocument.body.querySelector("hr");
            return (
              hr &&
              hr.previousSibling &&
              hr.previousSibling.textContent ===
                "Москва славится своими театрами не только на всю Россию, но и на весь мир. На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира."
            );
          },
          failMsg: `Убедитесь, что после фразы "театралы со всего мира." стоит элемент hr.`,
        },
      ],
      solution: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <h3>Кинотеатры</h3>
</div>`,
    },

    {
      id: 9,
      header: "Неупорядоченные списки - элементы ul и li",
      url: "html-unordered-list",
      theory: `<p>Есть много информации, которую удобно отображать в виде списка (например, список покупок). Рассмотрим, как отобразить список чего-либо с помощью элемента <code>ul</code> (<i>unordered list</i>).</p>
        <p><code>ul</code> отобразит <em>неупорядоченный</em> список элементов, каждый из них по умолчанию будет помечен круглым маркером. Однако нельзя просто так вставить текст в <code>ul</code>. Каждый элемент списка должен быть обернут в элемент <code>li</code> (<i>list item</i>). Например, вот так:</p>
        
<pre><code><span class="tag">&lt;ul></span>
  <span class="tag">&lt;li></span>Газеты<span class="tag">&lt;/li></span>
  <span class="tag">&lt;li></span>Журналы<span class="tag">&lt;/li></span>
  <span class="tag">&lt;li></span>Буклеты<span class="tag">&lt;/li></span>
<span class="tag">&lt;/ul></span></code></pre>

        <p>Вот как этот список будет выглядить на странице:</p>
        <p><ul><li>Газеты</li><li>Журналы</li><li>Буклеты</li></ul></p>
        <p>Обратите внимание, что элемент <code>li</code> должен быть прямым потомком элемента <code>ul</code>. Такая разметка некорректна:</p>

<pre><code><span class="tag">&lt;ul></span>
  <span class="tag">&lt;div></span>
    <span class="tag">&lt;li></span>Газеты<span class="tag">&lt;/li></span>
    <span class="tag">&lt;li></span>Журналы<span class="tag">&lt;/li></span>
    <span class="tag">&lt;li></span>Буклеты<span class="tag">&lt;/li></span>
  <span class="tag">&lt;/div></span>
<span class="tag">&lt;/ul></span></code></pre>`,
      goal: `Добавьте на страницу неупорядоченный список.`,
      initValues: {
        html: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>

  <h3>Кинотеатры</h3>
</div>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Ниже параграфа с текстом "Среди самых красивых парков Москвы:" добавьте неупорядоченный список.`,
          test: (iframe: HTMLIFrameElement) => {
            const ul = iframe.contentDocument.body.querySelector("ul");
            return ul !== null;
          },
          failMsg: `Убедитесь, что после текста "Среди самых красивых парков Москвы:" добавлен неупорядоченный список ul`,
        },
        {
          id: 2,
          label: `Добавьте элемент списка с текстом "Парк Горького".`,
          test: (iframe: HTMLIFrameElement) => {
            const ul = iframe.contentDocument.body.querySelector("ul");
            return (
              ul && ul.children[0] && ul.children[0].tagName === "LI" && ul.children[0].textContent === "Парк Горького"
            );
          },
          failMsg: `Убедитесь, что добавлен элемент списка с текстом "Парк Горького".`,
        },
        {
          id: 3,
          label: `Добавьте второй элемент списка с текстом "Нескучный сад".`,
          test: (iframe: HTMLIFrameElement) => {
            const ul = iframe.contentDocument.body.querySelector("ul");
            return (
              ul && ul.children[1] && ul.children[1].tagName === "LI" && ul.children[1].textContent === "Нескучный сад"
            );
          },
          failMsg: `Убедитесь, что добавлен элемент списка с текстом "Нескучный сад".`,
        },
        {
          id: 4,
          label: `Добавьте третий элемент списка с текстом "Парк Победы".`,
          test: (iframe: HTMLIFrameElement) => {
            const ul = iframe.contentDocument.body.querySelector("ul");
            return (
              ul && ul.children[2] && ul.children[2].tagName === "LI" && ul.children[2].textContent === "Парк Победы"
            );
          },
          failMsg: `Убедитесь, что добавлен элемент списка с текстом "Парк Победы".`,
        },
      ],
      solution: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul>
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <h3>Кинотеатры</h3>
</div>`,
    },

    {
      id: 10,
      header: "Упорядоченные списки - элемент ol",
      url: "html-ordered-list",
      theory: `<p>Иногда необходимо отобразить список элементов, в котором важна последовательность их расположения. Для этого служит <i>упорядоченный список</i> - <code>ol</code> (<i>ordered list</i>).</p>
        <p>Единственное его отличие от <code>ul</code> в том, что каждый элемент списка отобразится под собственным номером. В качестве вложенных элементов используются уже знакомые вам элементы списка <code>li</code>. Вот как это выглядит в разметке:</p>
        
        <pre><code><span class="tag">&lt;h3></span>Самые длинные реки в мире:<span class="tag">&lt;/h3></span>
<span class="tag">&lt;ol></span>
  <span class="tag">&lt;li></span>Нил<span class="tag">&lt;/li></span>
  <span class="tag">&lt;li></span>Амазонка<span class="tag">&lt;/li></span>
  <span class="tag">&lt;li></span>Янцзы<span class="tag">&lt;/li></span>
<span class="tag">&lt;/ol></span></code></pre>

        <p>Вот как упорядоченный список будет выглядить на странице:</p>
        <p><h3>Самые длинные реки в мире:</h3><ol><li>Нил</li><li>Амазонка</li><li>Янцзы</li></ol></p>
        <p>Используйте упорядоченный список для отображения последовательных этапов какого-либо процесса или различных рейтингов.</p>`,
      goal: `Добавьте на страницу упорядоченный список.`,
      initValues: {
        html: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul>
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <h3>Кинотеатры</h3>
  <p>К любимым кинотеатрам москвичей относятся:</p>

</div>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Ниже параграфа с текстом "К любимым кинотеатрам москвичей относятся:" добавьте упорядоченный список.`,
          test: (iframe: HTMLIFrameElement) => {
            const ol = iframe.contentDocument.body.querySelector("ol");
            return !!ol;
          },
          failMsg: `Убедитесь, что после текста "К любимым кинотеатрам москвичей относятся:" добавлен упорядоченный список ol`,
        },
        {
          id: 2,
          label: `В упорядоченный список добавьте <b>не менее трех</b> кинотеатров, которые относятся к вашим любимым.`,
          test: (iframe: HTMLIFrameElement) => {
            const ol = iframe.contentDocument.body.querySelector("ol");

            return (
              ol &&
              ol.children &&
              ol.children.length >= 3 &&
              ol.children[0].tagName === "LI" &&
              ol.children[0].textContent !== "" &&
              ol.children[1].tagName === "LI" &&
              ol.children[1].textContent !== "" &&
              ol.children[2].tagName === "LI" &&
              ol.children[2].textContent !== ""
            );
          },
          failMsg: `Убедитесь, что список ol содержит не менее трех непустых элементов li`,
        },
      ],
      solution: `<h1>Москва</h1>
<div>
  <h2>Культура</h2>
  <h3>Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3>Театры</h3>
  <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul>
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <h3>Кинотеатры</h3>
  <p>К любимым кинотеатрам москвичей относятся:</p>
  <ol>
    <li>Москва</li>
    <li>Атриум</li>
    <li>Родина</li>
  </ol>
</div>`,
    },

    {
      id: 11,
      header: "Аттрибуты элементов",
      url: "html-attributes",
      theory: `<p>Если нам требуется не только отобразить элемент на странице, но и придать ему дополнительные свойства, мы даем элементу <em>аттрибуты</em>. Аттрибут - это дополнительный контент элемента, который записывается в открывающем тэге. Например так:</p>
        
        <pre><code><span class="tag">&lt;div <span class="attr-name">id=</span><span class="attr-value">"culture"</span>></span><span class="tag">&lt;/div></span></code></pre>

        <p>В данном случае элементу <code>div</code> был присвоен аттрибут с именем <code>id</code> и значением <code>culture</code>. Аттрибут id используется для уникальной идентификации элемента. Элемент с определенным значением <code>id</code> может быть только один на странице.</p>
        <p>Вот еще один из наиболее часто используемых аттрибутов:</p>

        <pre><code><span class="tag">&lt;h3 <span class="attr-name">class=</span><span class="attr-value">"small-header"</span>></span>Музеи<span class="tag">&lt;/h3></span></code></pre>

        <p>Аттрибут <code>class</code> используется для передачи CSS свойств группе элементов  с одинаковым классом. Например, если на странице есть несколько заголовков с классом "small-header", мы можем найти их из CSS и придать им необходимые свойста, например, покрасить в другой цвет или изменить размер шрифта. Этим аттрибутом мы будем активно пользоваться в курсе по CSS.</p>
        <p>А вот аттрибут, который меняет внешний вид элемента прямо из HTML:</p>
        
        <pre><code><span class="tag">&lt;span <span class="attr-name">class=</span><span class="attr-value">"color: orange"</span>></span>не только на всю Россию, но и на весь мир.<span class="tag">&lt;/span></span></code></pre>

        <p>Аттрибут <code>style</code> задает стили элементам. В данном случае он покрасит текст, отображаемый элементом <code>span</code> в оранжевый цвет. Это один из трех способов изменять стили элементов, с остальными мы познакомимся позже.</p>`,
      goal: `Добавьте элементам аттрибуты`,
      initValues: {
        html: `<h1>Москва</h1>
<div id="culture">
  <h2>Культура</h2>
  <h3 class="small-header">Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3 class="small-header">Театры</h3>
  <p>Москва славится своими театрами <span style="color: orange">не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div>
  <h2>Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul>
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <h3>Кинотеатры</h3>
  <p>К любимым кинотеатрам москвичей относятся:</p>
  <ol>
    <li>Москва</li>
    <li>Атриум</li>
    <li>Родина</li>
  </ol>
</div>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Второму элементу <code>div</code> задайте id со значением "leisure".`,
          test: (iframe: HTMLIFrameElement) => {
            const leisureElem = iframe.contentDocument.body.querySelector("#leisure");
            return (
              leisureElem &&
              leisureElem.tagName === "DIV" &&
              leisureElem.previousElementSibling &&
              leisureElem.previousElementSibling.tagName === "DIV"
            );
          },
          failMsg: `Убедитесь, что второму элементу div задан аттрибут id со значением leisure`,
        },
        {
          id: 2,
          label: `Заголовку <code>h2</code> с текстом "Отдых" задайте класс "big-header".`,
          test: (iframe: HTMLIFrameElement) => {
            const bigHeader = iframe.contentDocument.body.querySelector(".big-header");
            return (
              bigHeader &&
              bigHeader.tagName === "H2" &&
              bigHeader.nextElementSibling &&
              bigHeader.nextElementSibling.tagName === "H3"
            );
          },
          failMsg: `Убедитесь, что  заголовку с текстом "Отдых" задан аттрибут class со значением "big-header"`,
        },
        {
          id: 3,
          label: `Неупорядоченному списку <code>ul</code> с помощью <code>style</code> задайте цвет текста "darkorchid". Обратите внимание, что цвет изменится у всех элементов списка.`,
          test: (iframe: HTMLIFrameElement) => {
            const ul = iframe.contentDocument.body.querySelector("ul");
            return ul && ul.style.color === "darkorchid";
          },
          failMsg: `Убедитесь, что неупорядоченному списку задан аттрибут style со значением "color: darkorchid"`,
        },
        {
          id: 4,
          label: `Упорядоченному списку <code>ol</code> с помощью <code>style</code> задайте цвет фона "burlywood" (значение <code>style</code> установите "background-color: burlywood").`,
          test: (iframe: HTMLIFrameElement) => {
            const ol = iframe.contentDocument.body.querySelector("ol");
            return ol && ol.style.backgroundColor === "burlywood";
          },
          failMsg: `Убедитесь, что упорядоченному списку задан аттрибут style со значением "background-color: burlywood"`,
        },
      ],
      solution: `<h1>Москва</h1>
<div id="culture">
  <h2>Культура</h2>
  <h3 class="small-header">Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3 class="small-header">Театры</h3>
  <p>Москва славится своими театрами <span style="color: orange">не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p><hr>
</div>
<div id="leisure">
  <h2 class="big-header">Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul style="color: darkorchid">
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <h3>Кинотеатры</h3>
  <p>К любимым кинотеатрам москвичей относятся:</p>
  <ol style="background-color: burlywood">
    <li>Москва</li>
    <li>Атриум</li>
    <li>Родина</li>
  </ol>
</div>`,
    },

    {
      id: 12,
      header: "Изображения - элемент img",
      url: "html-img",
      theory: `<p>На нашей странице мы уже отобразили достаточно много текстовых элементов. Но что же насчет картинок? Какой же это Интернет без картинок с мемасами.</p>
        <p>Для вывода на страницу изображений служит элемент <code>img</code>. Вот как он выглядит в разметке:</p>

        <pre><code><span class="tag">&lt;img <span class="attr-name">src=</span><span class="attr-value">"путь_к_картинке.jpg"</span> <span class="attr-name">alt=</span><span class="attr-value">"текстовое описание"</span> /></span></code></pre>

        <p>Обратите внимание, что тэг <code>img</code> является самозакрывающимся. Перед закрывающей скобкой <code>></code> стоит слэш <code>/</code>, закрывающий тэг этому элементу не нужен.</p>
        <p>У <code>img</code> есть 2 важных аттрибута:</p>
        <p>Аттрибут <code>src</code> - это место расположения вашей картинки. Может быть как относительным путем до файла с картинкой, расположенной на вашем компьютере, так и <i>URL</i> адресом изображения в сети Интернет (например "https://adindex.ru/files2/news/2018_12/230066_4567.jpg"). Аттрибут <code>src</code> являетсяы обязательным, без него HTML не будет знать, где искать нужное изображение.</p>
        <p>Аттрибут <code>alt</code> является альтернативным текстовым описанием изображения и служит нескольким целям:
        <ul>
          <li>Он улучшает <b>доступность</b> сайта для слабовидящих посетителей. Когда посетитель использует экранную читалку для навигации по сайту, то программное обеспечение читалки, наткнувшись на <code>alt</code>, прочитает текстовое содержание вслух, и у посетителя будет понимание, что изображено на картинке. Мы еще будем говорить о доступности сайтов для посетителей с ограниченными возможностями.</li>
          <li>Если по какой-либо причине изображение не загрузилось, то по наведению мыши на место с не прогрузившейся картинкой, вы увидите ее текстовое описание.</li>
          <li>Аттрибут <code>alt</code> улучшает SEO показатели вашего сайта, так как используется поисковыми движками (они не могут буквально "увидеть" изображение на вашем сайте).</li>
        </ul></p>
        <p>Аттрибут <code>alt</code> формально не является обязательным, но лучше задавать его для каждого изображения на вашем сайте.</p>`,
      goal: `Добавьте на страницу изображение.`,
      initValues: {
        html: `<h1>Москва</h1>
<div id="culture">
  <h2>Культура</h2>
  <h3 class="small-header">Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3 class="small-header">Театры</h3>
  <p>Москва славится своими театрами <span style="color: orange">не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p>
  <p>Самым узнаваемым театром столицы безусловно является Большой театр.</p>
  <img src="https://adindex.ru/files2/news/2018_12/230066_4567.jpg" alt="Большой театр" /><hr>
</div>
<div id="leisure">
  <h2 class="big-header">Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul style="color: darkorchid">
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <p>Вот как выглядит Парк Горького:</p>

  <h3>Кинотеатры</h3>
  <p>К любимым кинотеатрам москвичей относятся:</p>
  <ol style="background-color: burlywood">
    <li>Москва</li>
    <li>Атриум</li>
    <li>Родина</li>
  </ol>
</div>`,
        css: `
        img {
          max-width: 100%
        }`,
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `После параграфа с текстом "Вот как выглядит Парк Горького:" добавьте изображение.`,
          test: (iframe: HTMLIFrameElement) => {
            const secondImg = iframe.contentDocument.body.querySelectorAll("img")[1];
            return (
              secondImg &&
              secondImg.previousElementSibling &&
              secondImg.previousElementSibling.tagName === "P" &&
              secondImg.previousElementSibling.textContent === "Вот как выглядит Парк Горького:"
            );
          },
          failMsg: `Убедитесь, что после параграфа с текстом "Вот как выглядит Парк Горького:" находится элемент img`,
        },
        {
          id: 2,
          label: `Задайте изображению источник "http://uploads.gazeta-moy-rayon-donskoy.ru/2020/07/парк-горького-москва-панорама-вк-пг.jpg".`,
          test: (iframe: HTMLIFrameElement) => {
            const secondImg = iframe.contentDocument.body.querySelectorAll("img")[1];
            return (
              secondImg &&
              secondImg.previousElementSibling &&
              secondImg.previousElementSibling.tagName === "P" &&
              secondImg.previousElementSibling.textContent === "Вот как выглядит Парк Горького:" &&
              secondImg.src ===
                "http://uploads.gazeta-moy-rayon-donskoy.ru/2020/07/%D0%BF%D0%B0%D1%80%D0%BA-%D0%B3%D0%BE%D1%80%D1%8C%D0%BA%D0%BE%D0%B3%D0%BE-%D0%BC%D0%BE%D1%81%D0%BA%D0%B2%D0%B0-%D0%BF%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D0%B0-%D0%B2%D0%BA-%D0%BF%D0%B3.jpg"
            );
          },
          failMsg: `Убедитесь, что изображению задан аттрибут src со значением "http://uploads.gazeta-moy-rayon-donskoy.ru/2020/07/парк-горького-москва-панорама-вк-пг.jpg"`,
        },
        {
          id: 3,
          label: `Задайте изображению альтернативный текст "Парк Горького".`,
          test: (iframe: HTMLIFrameElement) => {
            const secondImg = iframe.contentDocument.body.querySelectorAll("img")[1];
            return (
              secondImg &&
              secondImg.previousElementSibling &&
              secondImg.previousElementSibling.tagName === "P" &&
              secondImg.previousElementSibling.textContent === "Вот как выглядит Парк Горького:" &&
              secondImg.alt === "Парк Горького"
            );
          },
          failMsg: `Убедитесь, что изображению задан аттрибут alt со значением "Парк Горького"`,
        },
      ],
      solution: `<h1>Москва</h1>
<div id="culture">
  <h2>Культура</h2> 
  <h3 class="small-header">Музеи</h3>
  <p>В Москве <strong>огромное</strong> количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить <em>хотя бы один раз в жизни</em>.</p>
  <h3 class="small-header">Театры</h3>
  <p>Москва славится своими театрами <span style="color: orange">не только на всю Россию, но и на весь мир.</span><br> На сценах московских театров, которых насчитывается <em>великое множество</em>, проходят <strong>и классические и современные постановки.</strong> И в Москву часто приезжают театралы со всего мира.</p>
  <p>Самым узнаваемым театром столицы безусловно является Большой театр.</p>
  <img src="https://adindex.ru/files2/news/2018_12/230066_4567.jpg" alt="Большой театр" /><hr>
</div>
<div id="leisure">
  <h2 class="big-header">Отдых</h2>
  <h3>Парки</h3>
  <p>Среди самых красивых парков Москвы:</p>
  <ul style="color: darkorchid">
    <li>Парк Горького</li>
    <li>Нескучный сад</li>
    <li>Парк Победы</li>
  </ul>
  <p>Вот как выглядит Парк Горького:</p>
  <img src="http://uploads.gazeta-moy-rayon-donskoy.ru/2020/07/парк-горького-москва-панорама-вк-пг.jpg" alt="Парк Горького" />
  <h3>Кинотеатры</h3>
  <p>К любимым кинотеатрам москвичей относятся:</p>
  <ol style="background-color: burlywood">
    <li>Москва</li>
    <li>Атриум</li>
    <li>Родина</li>
  </ol>
</div>`,
    },
  ],
};
