import React from "react";

export const HtmlCourse = {
  id: 1,
  title: "Язык разметки HTML",
  excercises: [
    {
      id: 1,
      header: "HTML - язык гипертекстовой разметки",
      theory: ` <p>Добро пожаловать в Ваше первое испытание. Шаг за шагом мы пройдем весь тернистый путь вэб-разработки. И начнем мы этот путь с изучения языка разметки вэб-страниц -  <b>HTML</b>.</p>
          <p> В ходе испытаний редактируйте код прямо во встроенном редакторе кода справа от Вас. Сейчас редактор путой, но скоро мы это изменим.</p>
          <p>Зачем нам нужен HTML? HTML - скелет вэб-страниц, он придает структуру контенту, который вы видите, открывая сайт в Интернете. Изучение HTML может быть полезно не только начинающим разработчикам, но и SEO специалистам, маркетологам, дизайнерам и многим другим. С HTML начинается разработка сайта, вэб-приложения, новостной Интернет рассылки и т.д.</p>
          <p>HTML описывает только структуру контента страницы, за ее внешний вид отвечает язык стилей CSS, а за поведение - язык программирования Javascript. С этими технологиями мы познакомимся позже.</p>
          <p>HTML - это язык гипертекстовой разметки (HyperText Markup Language). Язык разметки означает, что необработанный текст находится внутри HTML элементов, которые и формируют структуру разметки. Гипертекст - это текст, который предоставляет доступ к другому тексту через систему ссылок (или гиперссылок)</p>
          <p>Итак, приступим к первому испытанию. Ваша задача обозначена ниже. Результат вашей работы будет отображаться в мини-браузере в правой части страницы. После выполнения всех целей испытания (да и в любой момент) вы можете проверить решение, нажав на кнопку "Запустить код". Когда задача будет выполнена, смело переходите к следующему испытанию.</p>`,
      goal: `Скопируйте в редактор кода строку: <pre><code><span class="tag"><<span>p</span>></span>Завтра начну изучать вэб-разработку!<span class="tag"><<span>/p</span>></span></code></pre>.`,
      initValues: {
        html: "",
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label:
            'Элемент <code><span><</span>p></code> должен содержать текст: "Завтра начну изучать вэб-разработку!".',
          test: (iframe: HTMLElement) =>
            iframe.querySelector("p") &&
            iframe.querySelector("p").textContent === "Завтра начну изучать вэб-разработку!",
          failMsg: '"Убедитесь, что элемент <p> содержит текст "Завтра начну изучать вэб-разработку!"',
        },
      ],
    },
    {
      id: 2,
      header: "Поздороваемся с HTML элементами",
      theory: `<p>В прошлом испытании мы вставили в редактор строку <pre><code><span class="tag"><<span>p</span>></span>Завтра начну изучать вэб-разработку!<span class="tag"><<span>/p</span>></span></code></pre></p>
         <p>Это ваш первый HTML элемент. HTML элементы Вы можете узнать по открывающим и закрывающим тэгам.</p>
         <p>Вот так выглядит открывающий тэг: <code><span><</span>p></code></p>
         <p>А так закрывающий: <code><span><</span>/p></code></p>
         <p>В закрывающем тэге после открывающей скобки стоит прямой слэш, вот и вся разница между ними.</p>
         <p>Текст, который находится между открывающим и закрывающим тэгом называется контентом HTML элемента.</p>
         <p>Кстати, <code>p</code> - это не что иное как параграф (<em>paragraph</em>), и служит он для того же, для чего параграф в обычной книге или статье - для отображения небольшого объема логически связанного текста.</p>`,
      goal: `<p>В редакторе измените текст в параграфе <code>p</code> на "Пожалуй, начну изучать вэб-разработку сегодня!".</p>
         <p>После первого параграфа добавьте на страницу еще один параграф <code>p</code>, содержащий текст "Начну с основ HTML". Не забывайте, что каждому открывающему тэгу должен соответствовать закрывающий!</p>`,
      initValues: {
        html: "<p>Завтра начну изучать вэб-разработку!</p>",
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: "На странице должно быть 2 параграфа <code>p</code>",
          test: (iframe: HTMLElement) => iframe.querySelectorAll("p").length === 2,
          failMsg: "Убедитесь, что на странице 2 параграфа",
        },
        {
          id: 2,
          label: 'В первом параграфе должен быть текст: "Пожалуй, начну изучать вэб-разработку сегодня!"',
          test: (iframe: HTMLElement) =>
            iframe.querySelectorAll("p")[0] &&
            iframe.querySelectorAll("p")[0].textContent === "Пожалуй, начну изучать вэб-разработку сегодня!",
          failMsg: 'Убедитесь, что текст внутри первого параграфа - "Пожалуй, начну изучать вэб-разработку сегодня!"',
        },
        {
          id: 3,
          label: 'Во втором параграфе должен быть текст: "Начну с основ HTML"',
          test: (iframe: HTMLElement) =>
            iframe.querySelectorAll("p")[1] && iframe.querySelectorAll("p")[1].textContent === "Начну с основ HTML",
          failMsg: 'Убедитесь, что текст внутри второго параграфа - "Начну с основ HTML"',
        },
      ],
    },

    {
      id: 3,
      header: "Вложенность тэгов",
      theory: `<p>HTML представляет собой древовидную структуру. Это значит, что одни элементы могут быть вложены в другие. В качестве примера рассмотрим эту простую разметку:</p>
         <pre><code><span class="tag"><<span>main</span>></span>\n  <span class="tag"><<span>p</span>></span>Этот параграф является потомком элемента main<span class="tag"><<span>/p</span>></span>\n<span class="tag"><<span>/main</span>></span></code></pre>
         <p>В этом примере тэг <code>main</code> является родителем тэга <code>p</code>, а тэг <code>p</code> в свою очередь - потомком <code>main</code>. Визуально потомок имеет отступ в 2 пробельных символа от своего родителя</p>
         <p>Уровней вложенности может быть сколь угодно много. Вот пример разметки посложнее:</p>
         <p><pre><code><span class="tag"><<span>main</span>></span>\n  <span class="tag"><<span>div</span>></span>\n    <span class="tag"><<span>p</span>></span>Этот параграф является потомком элемента div и имеет соседа\n       справа - элемент span<span class="tag"><<span>/p</span>></span>\n    <span class="tag"><<span>span</span>></span>Элемент span также является потомком div и имеет соседа\n         слева - элемент p<span class="tag"><<span>/span</span>></span>\n<span class="tag"><<span>/main</span>></span></code></pre></p>
         <p>В этом примере элемент <code>div</code> является потомком элемента <code>main</code>, а элементы <code>p</code> и <code>span</code> оба потомки <code>div</code>. Таким образом в данном примере присутствует тройная вложенность элементов.</p>
         <p>Структура вложенностей создает <b>иерархию</b> элементов.</p>
         <p>Понимание иерархии элементов очень важно, поскольку элементы потомки могут наследовать свойства от элементов родителей. Подробнее о том, как это происходит вы узнаете в курсе по CSS.</p>`,
      goal: `<p>В редакторе оберните созданные на прошлом задании параграфы в тэг div.</p>`,
      initValues: {
        html: `<main>\n  <div>\n    <span>Этот элемент уже обернут в тэг div</span>\n  </div>\n\n    <p>Пожалуй, начну изучать вэб-разработку сегодня!</p>\n    <p>Начну с основ HTML</p>\n\n</main>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: "На странице должно быть 2 элемента <code>div</code>",
          test: (iframe: HTMLElement) => iframe.querySelectorAll("div").length === 2,
          failMsg: "Убедитесь, что на странице 2 элемента div",
        },
        {
          id: 2,
          label: "У второго элемента <code>div</code> должно быть 2 элемента-потомка <code>p</code>",
          test: (iframe: HTMLElement) => {
            const secondDiv = iframe.querySelectorAll("div")[1];
            return (
              secondDiv &&
              secondDiv.children.length === 2 &&
              secondDiv.children[0].tagName === "P" &&
              secondDiv.children[1].tagName === "P"
            );
          },
          failMsg: "Убедитесь, что  внутри второго div находятся 2 параграфа p",
        },
      ],
    },

    {
      id: 4,
      header: "Заголовки - тэги h1-h6",
      theory: `<p>Заголовки в HTML служат той же цели, что и заголовки в любых других средствах массовой информации - привлечь внимание читателя и кратко описать контент. Заголовки, как привило, выделяются большим размером шрифта, чем основной контент, и жирным начертанием</p>
         <p>В HTML 6 уровней заголовков: <code>h1, h2, h3, h4, h5, h6</code>. <code>h</code> - это ни что иное, как <em>header</em> - заголовок.</p>
         <p><code>h1</code> - заголовок первого уровня, он главный на странице. Заголовок первого уровня должен быть один, так как он описывает содержание страницы целиком. Остальные заголовки описывают более мелкие структурные части страницы, их может быть любое количество.</p>
         <p>Обратите внимание, что заголовки должны находится в иерархической структуре, то есть заголовок <code>h2</code> может включать в себя один или несколько заголовков <code>h3</code>, но заголовок <code>h3</code> не должен включать в себя заголовок <code>h2</code>, так как это нарушает структуру контента страницы.</p>
         <p>Вот пример заголовка на странице:</p>
         <p><pre><code><span class="tag"><<span>h2</span>></span>Каталог товаров<span class="tag"><<span>/h2</span>></span></code></pre></p>`,
      goal: `<p>Добавьте на страницу еще несколько заголовков.</p>`,
      initValues: {
        html: `<main>\n  <h1>Москва</h1>\n  <h2>Культура</h2>\n  <h3>Музеи</h3>\n  <h3>Театры</h3>\n  <!--Начните добавлять заголовки ниже этой линии-->\n\n</main>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Добавьте заголовок второго уровня <code>h2</code> с текстом "Отдых"`,
          test: (iframe: HTMLElement) =>
            iframe.querySelectorAll("h2").length === 2 && iframe.querySelectorAll("h2")[1].textContent === "Отдых",
          failMsg: `Убедитесь, что внутри второго заголовка h2 содержится текст "Отдых"`,
        },
        {
          id: 2,
          label: `Ниже добавьте заголовок третьего уровня <code>h3</code> с текстом "Парки"`,
          test: (iframe: HTMLElement) => {
            const secondH2 = iframe.querySelectorAll("h2")[1];
            return (
              secondH2 &&
              secondH2.nextElementSibling &&
              secondH2.nextElementSibling.tagName === "H3" &&
              secondH2.nextElementSibling.textContent === "Парки"
            );
          },
          failMsg: `Убедитесь, что после заголовка <h2> "Отдых" следует заголовок <h3> с текстом "Парки"`,
        },
        {
          id: 3,
          label: `Ниже добавьте еще один заголовок третьего уровня с текстом "Кинотеатры"`,
          test: (iframe: HTMLElement) => {
            const h3 = Array.from(iframe.querySelectorAll("h3")).find(header => header.textContent === "Парки");
            return (
              h3 &&
              h3.nextElementSibling &&
              h3.nextElementSibling.tagName === "H3" &&
              h3.nextElementSibling.textContent === "Кинотеатры"
            );
          },
          failMsg: `Убедитесь, что после заголовка <h3> "Парки" следует заголовок <h3> с текстом "Кинотеатры"`,
        },
      ],
    },
    {
      id: 5,
      header: "Универсальный контейнер - тэг div",
      theory: `<p>Элемент <code>div</code> является универсальным контейнером HTML страницы, он нужен для группировки элементов. Мы уже встречались с этим элементом в упражнении на вложенность тэгов. Вот пример разметки с использованием <code>div</code>:</p>
        <pre><code><span class="tag"><<span>main</span>></span>\n  <span class="tag"><<span>div</span>></span>\n    <span class="tag"><<span>p</span>></span>Любые элементы можно группировать<span class="tag"><<span>/p</span>></span>\n    <span class="tag"><<span>span</span>></span>с помощью элемента div<span class="tag"><<span>/span</span>></span>\n  <span class="tag"><<span>/div</span>></span>\n<span class="tag"><<span>/main</span>></span></code></pre>
        <p>Элемент <code>div</code> никак визуально не отображается на странице. Он участвует в передаче пользовательских стилей дочерним элементам, а также создает раскладку блоков на странице. Все это будет наглядно показано в курсе по CSS.</p>
        <p>Вообще, <code>div</code> - это, пожалуй, самый часто используемый HTML элемент, поэтому давайте потренируемся в его использовании.</p>`,
      goal: `<p>Оберните ваши заголовки в <code>div</code>.  Не забывайте делать отступы в 2 пробельных символа для вложенных элементов. Это нужно для лучшей читаемости.</p>`,
      initValues: {
        html: `<main>\n  <h1>Москва</h1>\n\n  <h2>Культура</h2>\n  <h3>Музеи</h3>\n  <h3>Театры</h3>\n\n  <h2>Отдых</h2>\n  <h3>Парки</h3>\n  <h3>Кинотеатры</h3>\n\n</main>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Группа заголовков <b>'Культура'</b>, <b>'Музеи'</b>, <b>'Театры'</b> должна быть обернута в <code>div</code>`,
          test: (iframe: HTMLElement) => {
            const firstDiv = iframe.querySelectorAll("div")[0];
            return (
              firstDiv &&
              firstDiv.children.length === 3 &&
              firstDiv.children[0].tagName === "H2" &&
              firstDiv.children[1].tagName === "H3" &&
              firstDiv.children[2].tagName === "H3"
            );
          },
          failMsg: `Убедитесь, что внутри первого элемента div находятся заголовки - Культура, Музеи, Театры`,
        },
        {
          id: 2,
          label: `Группа заголовков <b>'Отдых'</b>, <b>'Парки'</b>, <b>'Кинотеатры'</b> должна быть обернута в <code>div</code>`,
          test: (iframe: HTMLElement) => {
            const secondDiv = iframe.querySelectorAll("div")[1];
            return (
              secondDiv &&
              secondDiv.children.length === 3 &&
              secondDiv.children[0].tagName === "H2" &&
              secondDiv.children[1].tagName === "H3" &&
              secondDiv.children[2].tagName === "H3"
            );
          },
          failMsg: `Убедитесь, что внутри второго элемента div находятся заголовки - Отдых, Парки, Кинотеатры`,
        },
      ],
      solution: `<main>\n  <h1>Москва</h1>\n  <div>\n    <h2>Культура</h2>\n    <h3>Музеи</h3>\n    <h3>Театры</h3>\n </div>\n  <div>\n    <h2>Отдых</h2>\n    <h3>Парки</h3>\n    <h3>Кинотеатры</h3>\n  </div>\n</main>`,
    },

    {
      id: 6,
      header: "Отображение текста - тэги p и span",
      theory: `<p>Текст на странице составляет большую часть контента (да простят меня вотографии котиков). Для его отображения используются тэги <code>p</code> и <code>span</code>.</p>
        <p>С параграфами <code>p</code> мы уже поработали, они служат для выделения блока текста.</p>
        <p>С помощью <code>span</code> выделяют отдельные текстовые элементы - слова и фразы, которые находятся на той же строке, что и остальной текст. Вот пример разметки, где эти элементы используются совместно:</p>
        <pre><code><span class="tag"><<span>div</span>></span>\n  <span class="tag"><<span>p</span>></span>В этом параграфе одно <span class="tag"><<span>span</span>></span>слово<span class="tag"><<span>/span</span>></span> выделено\n с помощью span<span class="tag"><<span>/p</span>></span>\n<span class="tag"><<span>/div</span>></span>\n</code></pre>
        <p>В этой разметке мы отделили слово <em>слово</em> от остального текста с помощью элемента <code>span</code>. Позже мы могли бы применть к этому слову какие-нибудь отдельные стили, например вывести его красным цветом</p>
        <p>Повторим - если вам нужно вывести на экран блок текста, используйте параграф <code>p</code>. Если вам нужно выделить текстовый элемент в пределах блока текста, используйте <code>span</code></p>`,
      goal: `Добавьте на страницу текстовую информацию.`,
      initValues: {
        html: `<main>\n  <h1>Москва</h1>\n  <div>\n    <h2>Культура</h2>\n    <h3>Музеи</h3>\n\n    <h3>Театры</h3>\n\n  </div>\n  <div>\n    <h2>Отдых</h2>\n    <h3>Парки</h3>\n    <h3>Кинотеатры</h3>\n  </div>\n</main>`,
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: `Под заголовком <b>Музеи</b> добавьте параграф <code>p</code> с текстом <em>"В Москве огромное количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить хотя бы один раз в жизни."</em>`,
          test: (iframe: HTMLElement) => {
            const museumH3 = iframe.querySelectorAll("h3")[0];
            return (
              museumH3 &&
              museumH3.textContent === "Музеи" &&
              museumH3.nextElementSibling &&
              museumH3.nextElementSibling.tagName === "P" &&
              museumH3.nextElementSibling.textContent ===
                "В Москве огромное количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить хотя бы один раз в жизни."
            );
          },
          failMsg: `Убедитесь, что под заголовком Музеи расположен параграф с текстом`,
        },
        {
          id: 2,
          label: `Под заголовком <b>Театры</b> добавьте параграф <code>p</code> с текстом <em>"Москва славится своими театрами не только на всю Россию, но и на весь мир. На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира."</em>`,
          test: (iframe: HTMLElement) => {
            const theaterH3 = iframe.querySelectorAll("h3")[1];
            return (
              theaterH3 &&
              theaterH3.textContent === "Театры" &&
              theaterH3.nextElementSibling &&
              theaterH3.nextElementSibling.tagName === "P" &&
              theaterH3.nextElementSibling.textContent ===
                "Москва славится своими театрами не только на всю Россию, но и на весь мир. На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира."
            );
          },
          failMsg: `Убедитесь, что под заголовком Театры расположен параграф с текстом`,
        },
        {
          id: 3,
          label: `В параграфе текста про театры оберните фразу <em>не только на всю Россию, но и на весь мир.</em> в тэг <code>span</code>`,
          test: (iframe: HTMLElement) => {
            const span = iframe.querySelector("span");
            return span && span.textContent === "не только на всю Россию, но и на весь мир.";
          },
          failMsg: `Убедитесь, что на странице есть элемент span с текстом "не только на всю Россию, но и на весь мир."`,
        },
      ],
      solution: `<main>\n  <h1>Москва</h1>\n  <div>\n    <h2>Культура</h2>\n    <h3>Музеи</h3>\n    <p>В Москве огромное количество музеев, но среди них выделяются настоящие гиганты исторических, технических и художественных экспозиций, которые необходимо посетить хотя бы один раз в жизни.</p>\n\n    <h3>Театры</h3>\n    <p>Москва славится своими театрами <span>не только на всю Россию, но и на весь мир.</span> На сценах московских театров, которых насчитывается великое множество, проходят и классические и современные постановки. И в Москву часто приезжают театралы со всего мира.</p>\n  </div>\n  <div>\n    <h2>Отдых</h2>\n    <h3>Парки</h3>\n    <h3>Кинотеатры</h3>\n  </div>\n</main>`,
    },
    /* {
      id: 5,
      header: "Ссылки на внешние страницы",
      theory:
        '<p>Ссылки - кровь Интернета. По ним вы переходите на любые интересующие вас ресурсы.</p><p>В HTML для перехода на какую-либо внешнюю страницу используется тэг <code>a</code> (англ. "anchor" - якорь)</p><p>У ссылки есть обязательный аттрибут <code>href</code>, который содержит адрес нужного ресурса. И конечно ссылка выводит текст, по которому нужно кликнуть мышкой</p><p>К примеру, ссылка на страницу, на которой вы сейчас находитесь, выглядит так: </p><p><code><a href="https://webgrove.org">Ссылка на сайт webgrove.org</a></code></p><p>Ваш браузер выведет на экран текст "Ссылка на сайт webgrove.org", при клике на который вы перейдете поадресу <a href="https://freecodecamp.org">webgrove.org</a></p><p>Кликните, не стесняйтесь!</p>',
      goal: 'Создайте ссылку на сайт "https://apexcharts.com"',
      initValues: {
        html: "<!--Разместите ссылку ниже этой линии-->\n",
        css: "",
        js: "",
      },
      tasks: [
        {
          id: 1,
          label: '- Внутри тэга <code><а></code> должен быть размещен текст "Ссылка на apexcharts.com".',
          test: (iframe: HTMLElement) =>
            iframe.querySelector("a") && iframe.querySelector("a").textContent === "Ссылка на apexcharts.com",
          failMsg: "Внутри тэга <a> должен быть текст 'Ссылка на apexcharts.com'",
        },
        {
          id: 2,
          label: "- Ссылка <code><а></code> должна вести на сайт https://apexcharts.com/.",
          test: (iframe: HTMLElement) =>
            iframe.querySelector("a") && iframe.querySelector("a").href === "https://apexcharts.com/",
          failMsg: 'Тэг <a> должен иметь аттрибут href со значением "https://apexcharts.com/"',
        },
      ],
    }, */
  ],
};
