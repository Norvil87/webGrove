import { ICourseLesson } from "../../shared/types";

export const JsIntro: ICourseLesson = {
  id: 1,
  title: "Основы Javascript",
  url: "js-intro",
  excercises: [
    {
      id: 1,
      header: "Консоль",
      url: "js-console",
      theory: ` <p>Начало программирования на JavaScript - первый шаг к оживлению ваших вэб-страниц. JavaScript - мощный, гибкий и быстрый язык программирования, изначально разработанный для взаимодействия с HTML и CSS в окружении браузера (хотя сейчас сфер его применения куда больше). JS делает динамичными все сайты в Интернете, включая этот.</p>
      <p>У JS в настоящее время почти нет альтернатив в разработке вэб-приложений, поэтому это самый популярный язык программирования в мире, давайте же научимся с ним работать!</p>
      <p>Во вступительном уроке мы познакомимся с базовыми встроенными возможностями языка, включая типы данных, встроенные объекты, арифметические операции.</p>
      <p>Одно важное замечание - при изучении языка программирования особенно важна последовательность в получаемых знаниях и практика для их применения. Базовые концепции, рассмотренные в этом уроке, служат основой более сложных концепций в будущем. Поэтому рекомендуется регулярно возвращаться к уже выполненным урокам, а также решать дополнительные задачки, доступные на этом сайте.</p>
      
      <p>Большинство действий, которое выполняет движок языка программирования, по-умолчанию скрыто от пользователей. Чтобы увидеть результат нашей работы, его нужно вывести в <i>консоль</i> с помощью ключевого слова <code>console</code>.</p>
      <p>Такой код:</p>
  
      <pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="number">10</span>);</span></pre></code>
  
      <p>выведет в консоль число <code>10</code>. Консоль в рамках этого симулятора расположена справа. Кстати, только что мы написали первый скрипт. Именно так называются программы на JavaScript и подобных ему языках. Разберем этот код подробнее.</p>
      <p>Сначала вы пишите ключевое слово <code>console</code>. <code>console</code> - это встроенный в JavaScript <i>объект</i> - набор данных и методов (действий), которые можно применить к этим данным. Одним из методов объекта <code>console</code> является <code>log()</code>, которое просто выводит (<i>логгирует</i>) в консоль определенную информацию. Метод отделен от объекта точкой <code>.</code> и после названия метода ставятся круглые скобки <code>()</code>. Конец строки кода или выражения обозначается точной с запятой <code>;</code>.</p>
      <p>Таким образом, запись <code>console.log()</code> означает <i>вывести (логгировать) информацию в консоль</i>. Что именно будет выведено в консоль записывается между круглыми скобками <code>()</code>. В данном случае в консоли отобразится число <code>10</code>.</p>
      <p>У объекта <code>console</code> есть много других методов, например метод <code>console.error()</code> выведет в консоль сообщение об ошибке, если она возникнет.</p>
      <p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/ru/docs/Web/API/Console" target="_blank">консоли</a>.</p>`,
      goal: `Выведите информацию в консоль`,
      initValues: {
        html: "",
        css: "",
        js: `console.log();`,
      },
      tasks: [
        {
          id: 1,
          label: `В первой строке редактора выведите в консоль строку "Мое любимое число: "`,
          testRegExp: [`\console\\.log\\(("|'|\`)Мое любимое число: ("|'|\`)\\);`],
          failMsg: "Убедитесь, что вы вставили строку между круглыми скобками выражения console.log()",
        },
        {
          id: 2,
          label: "На следующей строке создайте еще одно консольное сообщение и выведите свое любимое число",
          testRegExp: [`\console\\.log\\([0-9]+\\);`],
          failMsg: "Убедитесь, что вы не забыли точку с запятой",
        },
      ],
    },

    {
      id: 2,
      header: "Типы данных",
      url: "js-data-types",
      theory: ` <p>Программирование прежде всего связано с работой с различными типами данных. Типы данных - это способы организации данных. В JavaScript данные делятся на 2 типа - <b>примитивные</b> и <b>сложные</b>.</p>
      <p>К <b>примитивным</b> типам данных относятся следующие:</p>
      <ul>
        <li>Числа - любые числа, включая положительные, отрицательные и дробные - <code>6</code>, <code>-22</code>, <code>17.45</code>. В отличие от многих других языков программирования, в JavaScript нет разделения на целые числа и числа с плавающей запятой как отдельные типы данных.</li>
        <li>Строки - набор символов, введенных с клавиатуры, окруженный кавычками - одинарными <code>' '</code> или двойными <code>" "</code>. Разницы между одинарными и двойными кавычками для строк нет. С помощью строк отображвется текстовая информация. Например, 6 - это число, а "6" - уже строка (так как символы окружены кавычками).</li>
        <li>Логический - тип данных, принимающий два возможных значения - <code>true</code> и <code>false</code>. Логический тип данных служит для представления истина/ложь. Их можно рассматривать как ответы "да" и "нет" на вопрос.</li>
        <li>Null - тип данных, описываемый ключевым словом - <code>null</code> означает намеренное отсутсвие какого-либо значения.</li>
        <li>undefined - тип данных, описываемый ключевым словом - <code>undefined</code> означает, что значение еще не определено/не задано.</li>
        <li>Symbol - тип данных, представляющий собой уникальные идентификаторы. Этот тип данных нам не понадобится.</li>
      </ul>
      <p>К <b>сложным</b> типам данных относится только один:</p>
      <ul>
        <li>Объекты - наборы взаимосвязанных данных. Есть встроенные в JavaScript объекты, например <code>console</code>, есть те, которые создаются пользователем.</li>
      </ul>
      <p>Несмотря на то, что сложный тип данных только один, объекты чрезвычайно важны и выполняют самые разнообразные задачи. Объектам будет посвящена отдельная глава курса. Давайте пока потренируемя с выводом в консоль примитивных типов данных. Не забывайте про точку с запятой в конце каждой строки.</p>
      
      <p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures" target="_blank">типах данных</a>.</p>`,
      goal: `Выведите в консоль данные различных типов`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль любую непустую строку, не содержащую цифр`,
          testRegExp: [`\console\\.log\\(("|'|\`)\\D+("|'|\`)\\);`],
          failMsg: "Убедитесь, что строка заключена в кавычки",
        },
        {
          id: 2,
          label: "Выведите в консоль любое трехзначное отрицательное число",
          testRegExp: [`\console\\.log\\(-[0-9]{3}\\);`],
          failMsg: "Убедитесь, что вы вывели число без кавычек",
        },
        {
          id: 3,
          label: "Выведите в консоль логическое значение <code>false</code>",
          testRegExp: [`\console\\.log\\(false\\);`],
          failMsg: "Убедитесь, что вы вывели логическое значение без кавычек",
        },
        {
          id: 4,
          label: "Выведите в консоль значение <code>undefined</code>",
          testRegExp: [`\console\\.log\\(undefined\\);`],
          failMsg: "Убедитесь, что вы вывели значение без кавычек",
        },
      ],
    },

    {
      id: 3,
      header: "Арифметические операции",
      url: "js-arithmetic",
      theory: ` <p>При написании скриптов вам непременно придется совершать много арифметических операций. Поэтому рассмотрим, какие арифметические операторы вам доступны в JavaScript. <em>Операторы</em> в целом - это символы, которые выполняют определенные задачи в коде. Арифметичесик операторы выполняют математические вычисления и операции с цифрами. Чаще всего используются следующие:</p>
      <ul>
        <li><code>+</code> - оператор сложения</li>
        <li><code>-</code> - оператор вычитания</li>
        <li><code>*</code> - оператор умножения</li>
        <li><code>/</code> - оператор деления</li>
        <li><code>%</code> - оператор, вычисляющий остаток от деления</li>
      </ul>
      <p>Теперь посмотри, как использовать их в коде:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="number">2</span> + <span class="number">10</span>); <span class="comment">// выведет 12</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">5</span> - <span class="number">15</span>); <span class="comment">// выведет -10</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">10</span> * <span class="number">2.5</span>); <span class="comment">// выведет 25</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">10</span> / <span class="number">2</span>); <span class="comment">// выведет 5</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">25</span> % <span class="number">5</span>); <span class="comment">// выведет 0</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">24</span> % <span class="number">5</span>); <span class="comment">// выведет 4</span>    
</pre></code>
 
<p>Обратите внимание на 2 вещи. Во-первых, вы можете выполнять вычисления прямо внутри круглых скобок выражения <code>console.log()</code>! Последовательность здесь такая - сначала вычисляется арифметическое выражение в скобках, потом результат вычисления выводится в консоль.</p>
<p>Также между арифметическим оператором и каждым из <em>операндов</em> (чисел, к которым применяются операторы) стоят знаки пробела. Это не обязательно, ваш код будет работать и без пробелов, но така запись улучшает читаемость кода.</p>
<p>Пара слов о работе оператора <code>%</code>. Он вычисляет целый остаток от деления левого операнда на правый . В примере выше <code>25</code> делится на <code>5</code> целое число раз (5 раз), поэтому остаток от деления равен <code>0</code>. Во втором случае <code>24</code> можно разделить на <code>5</code> только 4 раза, поэтому остаток от деления равен <code>24 - (20 / 5) = 4</code>.</p>     
      <p class="external-resource">Прочитать больше об <a href="https://developer.mozilla.org/ru/docs/conflicting/Web/JavaScript/Reference/Operators#сложение" target="_blank">арифметических операторах</a>.</p>`,
      goal: `Проведите арифметические вычисления`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль результат сложения чисел <code>-4</code> и <code>1</code>`,
          testRegExp: [`\console\\.log\\((-4\\s?\\+\\s?1|1\\s?\\+\\s?-4)\\);`],
          failMsg: "Убедитесь, что вы использовали оператор +",
        },
        {
          id: 2,
          label: "Выведите в консоль результат вычитания чисел <code>400</code> и <code>399</code>",
          testRegExp: [`\console\\.log\\(400\\s?\\-\\s?399\\);`],
          failMsg: "Убедитесь, что вы использовали оператор -",
        },
        {
          id: 3,
          label: "Выведите в консоль результат умножения чисел <code>40</code> и <code>0</code>",
          testRegExp: [`\console\\.log\\((40\\s?\\*\\s?0|0\\s?\\*\\s?40)\\);`],
          failMsg: "Убедитесь, что вы использовали оператор *",
        },
        {
          id: 4,
          label: "Выведите в консоль результат деления чисел <code>250</code> и <code>45</code>",
          testRegExp: [`\console\\.log\\(250\\s?\\/\\s?45\\);`],
          failMsg: "Убедитесь, что вы использовали оператор /",
        },
        {
          id: 5,
          label: "Выведите в консоль остаток от деления чисел <code>13</code> и <code>3</code>",
          testRegExp: [`\console\\.log\\(13\\s?\\%\\s?3\\);`],
          failMsg: "Убедитесь, что вы использовали оператор %",
        },
      ],
    },

    {
      id: 4,
      header: "Конкатенация строк",
      url: "js-string-concatenation",
      theory: ` <p>Арифметические операторы можно применять не только к числам. Например, с помощью оператора <code>+</code> можно соединять строки. Такая операция называется <em>конкатенацией строк</em>(string concatenation).</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Соединим"</span> + <span class="string">"три"</span> + <span class="string">"строки"</span>); <span class="comment">// выведет "Соединимтристроки"</span></pre></code>
 
<p>Обратите внимание, что итоговая строка не читаема. Это потому, что ни в одной из трех исходных строк нет пробельных символов, соответственно их нет и в соединенной строке. Это можно решить двумя способами:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Соединим "</span> + <span class="string">"три "</span> + <span class="string">"строки"</span>); <span class="comment">// выведет "Соединим три строки"</span></pre></code>

<p>Здесь мы добавили по одному пробельному символу к концу каждой из строк (кроме последней) и слова теперь разделены пробелами. Так лучше не делать, потому что это приводит к изменению исходных строк, что чаще всего не возможно или не желательно. Лучше сделать так:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Соединим"</span> + <span class="string">" "</span> + <span class="string">"три"</span> + <span class="string">" "</span> + <span class="string">"строки"</span>); <span class="comment">// выведет "Соединим три строки"</span></pre></code>

<p>В данном случае мы добавили в итоговую строку дополнительные строки, состоящие из пробельного символа. Пробел - такой же символ, как и все остальные и строка вполне может состоять из одного пробела <code>" "</code>.</p>`,
      goal: `Выполните сложение строк`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Использую конкатенацию строк выведите в консоль строку "Мне определенно нравится Javascript!". Пробелы должны быть отдельными строками, знак <code>!</code> также должен быть отдельной строкой.`,
          testRegExp: [
            `\console\\.log\\(("|'|\`)Мне("|'|\`)\\s?\\+\\s?("|'|\`) ("|'|\`)\\s?\\+\\s?("|'|\`)определенно("|'|\`)\\s?\\+\\s?("|'|\`) ("|'|\`)\\s?\\+\\s?("|'|\`)нравится("|'|\`)\\s?\\+\\s?("|'|\`) ("|'|\`)\\s?\\+\\s?("|'|\`)JavaScript("|'|\`)\\s?\\+\\s?("|'|\`)!("|'|\`)\\);`,
          ],
          failMsg: "Убедитесь, что вы сложили 8 строк в одну",
        },
      ],
    },

    {
      id: 5,
      header: "Слабая типизация",
      url: "js-weak-typing",
      theory: ` <p>В прошлых упражнениях мы складывали числа с числами и строки со строками. А теперь давайте сложим строку и число. Зачем? Да просто так:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"5"</span> + <span class="number">3</span>); <span class="comment">// выведет "53"</span></pre></code>
 
<p>Результатом этой операции является строка. JavaScript преобразует число <code>3</code> в строку <code>"3"</code>, а после этого происходит уже знакомая вам конкатенация строк со строкой "5". Это происходит прямо во время выполнения скрипта.</p>
<p>Не очень интуитивно понятно, не так ли? Дела в том, что JavaScript относится к языкам программирования со <b>слабой типизацией</b>. Он знает о существовании данных разных типов и при взаимодействии таких данных пытается привести разные типы данных к одному, при этом получается довольно непредсказуемый результат.</p>
<p>Правила преобразования заложены в движок языка. Если вместо сложения мы вычтем из строки число, то, наоборот, к строке будет применено численное преобразование и в результате получится число:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"5"</span> - <span class="number">3</span>); <span class="comment">// выведет 2</span></pre></code>

<p>Подобные преобразования происходят не только для строк и чисел, но и для любых других типов данных. В языках со <b>строгой типизацией</b> такое было бы невозможно, программа завершилась бы с ошибкой.</p>
<p>Причины такого поведения в основном исторические. JavaScript разрабатывался для работы в браузере, а вся информация в Интеренете передается в виде строк и такое поведение в какой-то степени оправданно. К сожалению, слабая типизация также может привести к большому количеству ошибок. Если ваш код работает не стабильно, то одна из наиболее вероятных причин - неявное преобразование типов данных из-за слабой типизации. Это надо постоянно держать в уме.</p>`,
      goal: `Выполните операции над различными типами данных.`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль результат умножения строки и числа.`,
          testRegExp: [
            `\console\\.log\\((("|'|\`).+("|'|\`)\\s?\\*\\s?[0-9]+)|([0-9]+\\s?\\*\\s?("|'|\`).+("|'|\`))\\);`,
          ],
          failMsg: "Убедитесь, что вы использовали правильные типы данных",
        },
        {
          id: 2,
          label: `Выведите в консоль результат деления строки на число. После этого поэксперементируйте с типами данных и арифметическими операциями, посмотрите результат.`,
          testRegExp: [`\console\\.log\\(("|'|\`).+("|'|\`)\\s?\\/\\s?[0-9]+\\);`],
          failMsg: "Убедитесь, что вы использовали правильные типы данных",
        },
      ],
    },

    {
      id: 6,
      header: "Свойства",
      url: "js-properties",
      theory: ` <p>Когда движок JavaScript видит в вашем скрипте какие-либо данные, он создает в памяти новый экземпляр данных определенного типа. Пусть к примеру вы написали в программе строку <code>"Я Иван"</code>. JavaScript "видит" эту строку и создает новый экземпляр данных типа <code>String</code> (строка).</p>
      <p>В этом экземпляре данных хранятся символы строки, а также другие <em>свойства</em>, которые описывают строку. Например, в экземпляре типа <code>String</code> есть свойство <code>length</code>, в котором хранится количество символов строки. Мы можем получить доступ к свойству вот так:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Я Иван"</span>.<span class="function">length</span>); <span class="comment">// выведет 6</span></pre></code>
 
<p>Доступ к свойству осуществляется через точку <code>.</code>. Поскольку в строке <code>"Я Иван"</code> 6 символов (напоминаем, что пробел - такой же символ, как и все остальные), то в свойстве <code>length</code> хранится значение <code>6</code>.</p>
<p>Кстати, точка <code>.</code> - это тоже оператор и означает "доступ к чему-либо".</p>
<p>У разных тип данных свои свойста. Например, у чисел свойства <code>length</code> нет, там оно не имеет смысла для чисел.</p>

<p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/length" target="_blank">свойстве length</a>.</p>`,
      goal: `Узнайте длину строк`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль длину строки "Я узнал(a) о том, как использовать свойства в JavaScript."`,
          testRegExp: [
            `\console\\.log\\(("|'|\`)Я узнал о том, как использовать свойства в JavaScript.("|'|\`).length\\);`,
          ],
          failMsg: "Убедитесь, что вы указали свойство через точку",
        },
        {
          id: 2,
          label: `Выведите в консоль длину пустой строки.`,
          testRegExp: [`\console\\.log\\(("|'|\`){2}.length\\);`],
          failMsg: "Убедитесь, что в строке нет ни одного символа",
        },
      ],
    },

    {
      id: 7,
      header: "Методы",
      url: "js-methods",
      theory: ` <p>Помимо свойств, у каждого экземпляра данных, в частности, у строк, есть набор <em>методов</em>, то есть действий, которые можно выполнить. На самом деле, мы уже активно пользуемся методами, так как выражение <code>console.log()</code>, это не что иное, как метод <code>log</code> (вывод информации на экран), вызываемый у встроенного объекта <code>console</code>.</p>
      <p>Подобно свойствам, методы отделяются от экземпляра данных оператором точка <code>.</code>. Кроме того, после названия метода ставится открывающая и закрывающая скобки <code>()</code>. Это означает, буквально, "выполнить действие <code>log</code> на объекте <code>console</code>".</p>
      <p>Посмотрим, какие еще методы для строк могут встретиться:</p>

<pre><code><span class="comment">.toUpperCase() переводит все символы строки в верхний регистр (делает буквы заглавными)</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Методы строк"</span>.<span class="function">toUpperCase()</span>); <span class="comment">// выведет "МЕТОДЫ СТРОК"</span>

<span class="comment">.endsWith() проверяет, заканчивается ли строка определенными символами</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Методы строк"</span>.<span class="function">endsWith(<span class="string">"рок"</span>)</span>); <span class="comment">// выведет true</span>
</pre></code>
 
<p>Первый метод <code>.toUpperCase()</code> переводит все символы исходной строки в верхний регистр, после чего <code>console.log()</code> выводит результат в консоль.</p>
<p>Второй метод <code>.endsWith()</code> проверяет, оканчивается ли исходная строка определенным набором символов, если это так, то <code>console.log()</code> выводит в консоль <code>true</code>, если нет, то <code>false</code>.</p>
<p>Обратите внимание, что во втором случае мы записали символы, наличие которых надо проверить между скобками <code>("рок")</code>. Таким образом, мы передали в метод <em>аргумент</em> (информацию, которую использует метод). Аргументы будут подробно рассматриваться в главе про функции в JavaScript, а сейчас достаточно помнить, что метод может вызываться с аргументами, или без них.</p>
<p>Существуют десятки встроенных методов для строк, как и для других типов данных. Их не надо учить наизусть, ими следует пользоваться как библиотекой, когда в этом возникает необходимость.</p>

<p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String#methods" target="_blank">методах строк</a>.</p>`,
      goal: `Выполните методы для строк`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Используйте метод <code>.toLowerCase()</code>, чтобы привести символы строки <code>"СТРОКА В НИЖНЕМ РЕГИСТРЕ"</code> к нижнему регистру. Результат выведите в консоль."`,
          testRegExp: [`\console\\.log\\(("|'|\`)СТРОКА В НИЖНЕМ РЕГИСТРЕ("|'|\`).toLowerCase\\(\\)\\);`],
          failMsg: "Убедитесь, что вы не забыли скобки () после названия метода",
        },
        {
          id: 2,
          label: `Используйте метод <code>.includes()</code>, чтобы проверить, есть ли в строке <code>"Понедельник начинается в субботу"</code> слово "Понедельник". Результат выведите в консоль."`,
          testRegExp: [
            `\console\\.log\\(("|'|\`)Понедельник начинается в субботу("|'|\`).includes\\(("|'|\`)Понедельник("|'|\`)\\)\\);`,
          ],
          failMsg: "Убедитесь, что вы передали искомое слово в качестве аргумента в метод",
        },
        {
          id: 3,
          label: `Теперь с помощью того же метода проверьте, есть ли в исходной строке слово "Вторник".`,
          testRegExp: [
            `\console\\.log\\(("|'|\`)Понедельник начинается в субботу("|'|\`).includes\\(("|'|\`)Вторник("|'|\`)\\)\\);`,
          ],
          failMsg: "Убедитесь, что вы передали искомое слово в качестве аргумента в метод",
        },
      ],
    },

    {
      id: 8,
      header: "Встроенные объекты",
      url: "js-built-in-objects",
      theory: `<p><code>console</code> - это встроенный объект, предоставляющий методы для работы с консолью, а <code>String</code>  - это встроенный объект, предоставляющий методы для работы со строками. Существуют еще несколько встроенных объектов, расширяющих функциональность языка, например встроенный объект <code>Math</code>.</p>
      <p>Объектом <code>Math</code> мы воспользуемя, если нам необходимо выполнить математические операции сложнее обычной арифметики. Как и у других объектов, у <code>Math</code> есть свой набор свойств и методов.</p>
      <p>Рассмотрим например,, задачу получения случайного числа в диапазоне 0 - 100 и воспользуемся для этого методом <code>.random()</code>, который вычисляет случайное число в диапазоне от 0 до 1:</p>

<pre><code><span class="keyword">Math</span>.<span class="function">random()</span>; <span class="comment">// вычислит случайное число от 0 до 1</span></pre></code>

<p>В результате работы метода <code>.random()</code> получается десятичное число вида <code>0.456949...</code>, всегда в диапазоне от 0 до 1. Чтобы получить число в требуемом нам диапазоне, нужно результат работы метода умножить на <code>100</code>:</p>

<pre><code><span class="keyword">Math</span>.<span class="function">random()</span> * 100; <span class="comment">// вычислит случайное число от 0 до 100</span></pre></code>

<p>Такой код вычислит число вида <code>45.6949...</code>. Все еще не очень удобно. Хотелось бы округлить результат, отбросив дробную часть. К счастью, у объекта <code>Math</code> для этого есть метод <code>.floor()</code>:</p>

<pre><code><span class="keyword">Math</span>.<span class="function">floor</span>(<span class="keyword">Math</span>.<span class="function">random()</span> * 100); <span class="comment">// оставит целую чать случайного числа от 0 до 100</span></pre></code>

<p>Метод <code>.floor()</code> округлит результат в меньшую сторону до близжайшего целого числа, отбросив десятичную часть, в результате получится число вида <code>45</code>. Наконец, как обычно, выведем результат в консоль:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="keyword">Math</span>.<span class="function">floor</span>(<span class="keyword">Math</span>.<span class="function">random()</span> * 100)); <span class="comment">// выведет результат вычислений в консоль</span></pre></code>

<p>Еще раз повторим, что делает код, выводящий в консоль случайное число от 0 до 100:</p>

<ol>
<li><code>Math.random()</code> вычисляет случайное десятичное число в диапазоне <code>0 - 1</code>.</li>
<li>Результат работы <code>Math.random()</code> умножаем на 100, получая случайное десятичное число в диапазоне <code>0 - 100</code>.</li>
<li>Результат вычисления передаем как аргумент в метод <code>Math.floor()</code>, получая случайное целое число в диапазоне <code>0 - 100</code>.</li>
<li>Результат вычисления  передаем как аргумент в метод <code>console.log()</code>, выводя результат в консоль.</li>
</ol>

<p>Таким образом, различные методы можно комбинировать, передавая результаты их работы как аргументы в другие методы.</p>

<p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank">встроенном объекте Math</a>.</p>
<p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank">других встроенных объектах</a>.</p>`,
      goal: `Поработайте со встроенными объектами`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль случайное число от 1 до 30. Результат округлите в большую сторону с помощью метода <code>Math.ceil()</code>."`,
          testRegExp: [`\console\\.log\\(Math.ceil\\(Math.random\\(\\)\\s?\\*\\s?30\\)\\);`],
          failMsg: "Убедитесь, что вы правильно вложили методы один в другой",
        },
        {
          id: 2,
          label: `Выведите в консоль число <code>PI</code>. Это число доступно как свойство объекта <code>Math</code>. Воспользуйтесь справкой для поиска."`,
          testRegExp: [`\console\\.log\\(Math.PI\\);`],
          failMsg: "Убедитесь, что вы используйте свойство PI",
        },
        {
          id: 3,
          label: `Воспользуйтесь методом <code>.isInteger()</code> встроенного объекта <code>Number</code> для того, чтобы определить, является ли число целым. Искомое число должно быть передано в метод в качестве аргумента.`,
          testRegExp: [`\console\\.log\\(Number.isInteger\\([0-9]*.?[0-9]*\\)\\);`],
          failMsg: "Убедитесь, что вы передали искомое слово в качестве аргумента в метод",
        },
      ],
    },

    {
      id: 9,
      header: "Комментарии",
      url: "js-comments",
      theory: `<p>В коде можно оставлять комментарии - информацию, предназначенную для человека. Комментарии полностью игнорируются компьютером при выполнении программы.</p>
      <p>Вот несколько причин оставлять комментарии:</p>
<ul>
  <li>Напомнить самому себе об узких местах собственного кода. Иногда вам потребуется вернуться к собственному коду несколько дней или месяцев после его написания и определенные особенности кода могут забыться. В идеале ваш код должен быть понятен сам по себе, но это в идеале:)</li>
  <li>Оставить подсказки другим разработчикам. Разработка программного продукта - это командная работа и ваш код почти наверняка будут читать другие программисты. Пояснение трудных мест в коде облегчит им эту задачу.</li>
  <li>Достаточно часто требуется "выключить" определенный фрагмент кода. Закомментируйте код и он не будет выполняться. Например, вы полагаете, что в определенном месте программы возникает ошибка. Тогда вы можете закомментировать этот фрагмент и оценить результат. Если ошибка исчезла, значит она действительно была допущена в закомменатированном фрагменте.</li>
</ul>

<p>Существует два варианта синтаксиса комментариев. Один из них активно использовался во фрагментах кода в этом уроке. Это однострочный комментарий <code>// комментарий</code>. Он может располагаться на одной строке с выполняемым кодом или на отдельной:</p>

<pre><code><span class="comment">// Определяет, является ли введенное число целым</span>
<span class="keyword">Number</span>.<span class="function">isInteger(<span class="number">34.555</span>)</span>; <span class="comment">// выведет false</span>
</pre></code>

<p>В первом комментарии мы кратно описали назначение метода, во втором - ожидаемый результат его выполнения. Второй вариант синтаксиса - многострочный комментарий  <code>/* ... */</code>:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Первый"</span>);
<span class="comment">/* 
<span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Второй"</span>);
<span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Третий"</span>);
<span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Четвертый"</span>);
<span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Пятый"</span>);
*/</span>
</pre></code>

<p>Весь код, находящийся между последовательностями символов <code>/*</code> и <code>*/</code> не будет выполняться. Это удобный способ "выключить" большой фрагмент кода. Кроме того, так можно закомментировать часть кода прямо внутри строки:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Изучать JavaScript"</span> <span class="comment">/* + " " + "не" */</span> + <span class="string">" "</span> + <span class="string">"обязательно"</span>); <span class="comment">// выведет "Изучать JavaScript обязательно"</span></pre></code>

<p>Комментарии - это важный и мощный инструмент разработчика и на них стоит потратить время.</p>`,
      goal: `Оставьте комментарии`,
      initValues: {
        html: "",
        css: "",
        js: `
const postfix = idParamName.substr(idParamName.lastIndexOf("$") + 1);
let resolver = state.filters[filterClientId].idResolvers[idParamName];

if (["MO", "MI", "LOWERDIVERT", "UPPERDIVERT"].includes(postfix)) {
  resolver = state.filters[filterClientId].idResolvers[idParamName.substr(0, idParamName.lastIndexOf("$"))];
  if (resolver) {
    resolver = {
      ...resolver,
      idParamName: resolver.idParamName,
      mcParamName: resolver.mcParamName,
      hlParamName: resolver.hlParamName
    };
  }
}`,
      },
      tasks: [
        {
          id: 1,
          label: `Закомментируйте весь код в редакторе с помощью многострочного комментария."`,
          testRegExp: [`\\/\\*\\s?const postfix`, `\\};\\s+}\\s+}\\s?\\*\\/`],
          failMsg: "Убедитесь, что закомментированы все строки с кодом",
        },
        {
          id: 2,
          label: `На первой строке добавьте однострочный комментарий "Раскомментировать код, когда смогу его понять"`,
          testRegExp: [`\\/{2}\\s?Раскомментировать код, когда смогу его понять`],
          failMsg: "Убедитесь, что однострочный комментарий добавлен без кавычек",
        },
      ],
    },
  ],
};
