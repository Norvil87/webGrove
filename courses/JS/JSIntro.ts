import { ICourseLesson } from "../../shared/types";

export const JsIntro: ICourseLesson = {
  id: 1,
  title: "Основы Javascript",
  url: "js-intro",
  excercises: [
    {
      id: 1,
      header: "Консоль",
      url: "js-console",
      theory: ` <p>Начало программирования на JavaScript - первый шаг к оживлению ваших вэб-страниц. JavaScript - мощный, гибкий и быстрый язык программирования, изначально разработанный для взаимодействия с HTML и CSS в окружении браузера (хотя сейчас сфер его применения куда больше). JS делает динамичными все сайты в Интернете, включая этот.</p>
      <p>У JS в настоящее время почти нет альтернатив в разработке вэб-приложений, поэтому это самый популярный язык программирования в мире, давайте же научимся с ним работать!</p>
      <p>Во вступительном уроке мы познакомимся с базовыми встроенными возможностями языка, включая типы данных, встроенные объекты, арифметические операции.</p>
      <p>Одно важное замечание - при изучении языка программирования особенно важна последовательность в получаемых знаниях и практика для их применения. Базовые концепции, рассмотренные в этом уроке, служат основой более сложных концепций в будущем. Поэтому рекомендуется регулярно возвращаться к уже выполненным урокам, а также решать дополнительные задачки, доступные на этом сайте.</p>
      
      <p>Большинство действий, которое выполняет движок языка программирования, по-умолчанию скрыто от пользователей. Чтобы увидеть результат нашей работы, его нужно вывести в <i>консоль</i> с помощью ключевого слова <code>console</code>.</p>
      <p>Такой код:</p>
  
      <pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="number">10</span>);</span></pre></code>
  
      <p>выведет в консоль число <code>10</code>. Консоль в рамках этого симулятора расположена справа. Кстати, только что мы написали первый скрипт. Именно так называются программы на JavaScript и подобных ему языках. Разберем этот код подробнее.</p>
      <p>Сначала вы пишите ключевое слово <code>console</code>. <code>console</code> - это встроенный в JavaScript <i>объект</i> - набор данных и методов (действий), которые можно применить к этим данным. Одним из методов объекта <code>console</code> является <code>log()</code>, которое просто выводит (<i>логгирует</i>) в консоль определенную информацию. Метод отделен от объекта точкой <code>.</code> и после названия метода ставятся круглые скобки <code>()</code>. Конец строки кода или выражения обозначается точной с запятой <code>;</code>.</p>
      <p>Таким образом, запись <code>console.log()</code> означает <i>вывести (логгировать) информацию в консоль</i>. Что именно будет выведено в консоль записывается между круглыми скобками <code>()</code>. В данном случае в консоли отобразится число <code>10</code>.</p>
      <p>У объекта <code>console</code> есть много других методов, например метод <code>console.error()</code> выведет в консоль сообщение об ошибке, если она возникнет.</p>
      <p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/ru/docs/Web/API/Console" target="_blank">консоли</a>.</p>`,
      goal: `Выведите информацию в консоль`,
      initValues: {
        html: "",
        css: "",
        js: `console.log();`,
      },
      tasks: [
        {
          id: 1,
          label: `В первой строке редактора выведите в консоль строку "Мое любимое число: "`,
          testRegExp: [`\console\\.log\\(("|'|\`)Мое любимое число: ("|'|\`)\\);`],
          failMsg: "Убедитесь, что вы вставили строку между круглыми скобками выражения console.log()",
        },
        {
          id: 2,
          label: "На следующей строке создайте еще одно консольное сообщение и выведите свое любимое число",
          testRegExp: [`\console\\.log\\([0-9]+\\);`],
          failMsg: "Убедитесь, что вы не забыли точку с запятой",
        },
      ],
    },

    {
      id: 2,
      header: "Типы данных",
      url: "js-data-types",
      theory: ` <p>Программирование прежде всего связано с работой с различными типами данных. Типы данных - это способы организации данных. В JavaScript данные делятся на 2 типа - <b>примитивные</b> и <b>сложные</b>.</p>
      <p>К <b>примитивным</b> типам данных относятся следующие:</p>
      <ul>
        <li>Числа - любые числа, включая положительные, отрицательные и дробные - <code>6</code>, <code>-22</code>, <code>17.45</code>. В отличие от многих других языков программирования, в JavaScript нет разделения на целые числа и числа с плавающей запятой как отдельные типы данных.</li>
        <li>Строки - набор символов, введенных с клавиатуры, окруженный кавычками - одинарными <code>' '</code> или двойными <code>" "</code>. Разницы между одинарными и двойными кавычками для строк нет. С помощью строк отображвется текстовая информация. Например, 6 - это число, а "6" - уже строка (так как символы окружены кавычками).</li>
        <li>Логический - тип данных, принимающий два возможных значения - <code>true</code> и <code>false</code>. Логический тип данных служит для представления истина/ложь. Их можно рассматривать как ответы "да" и "нет" на вопрос.</li>
        <li>Null - тип данных, описываемый ключевым словом - <code>null</code> означает намеренное отсутсвие какого-либо значения.</li>
        <li>undefined - тип данных, описываемый ключевым словом - <code>undefined</code> означает, что значение еще не определено/не задано.</li>
        <li>Symbol - тип данных, представляющий собой уникальные идентификаторы. Этот тип данных нам не понадобится.</li>
      </ul>
      <p>К <b>сложным</b> типам данных относится только один:</p>
      <ul>
        <li>Объекты - наборы взаимосвязанных данных. Есть встроенные в JavaScript объекты, например <code>console</code>, есть те, которые создаются пользователем.</li>
      </ul>
      <p>Несмотря на то, что сложный тип данных только один, объекты чрезвычайно важны и выполняют самые разнообразные задачи. Объектам будет посвящена отдельная глава курса. Давайте пока потренируемя с выводом в консоль примитивных типов данных. Не забывайте про точку с запятой в конце каждой строки.</p>
      
      <p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures" target="_blank">типах данных</a>.</p>`,
      goal: `Выведите в консоль данные различных типов`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль любую непустую строку, не содержащую цифр`,
          testRegExp: [`\console\\.log\\(("|'|\`)\\D+("|'|\`)\\);`],
          failMsg: "Убедитесь, что строка заключена в кавычки",
        },
        {
          id: 2,
          label: "Выведите в консоль любое трехзначное отрицательное число",
          testRegExp: [`\console\\.log\\(-[0-9]{3}\\);`],
          failMsg: "Убедитесь, что вы вывели число без кавычек",
        },
        {
          id: 3,
          label: "Выведите в консоль логическое значение <code>false</code>",
          testRegExp: [`\console\\.log\\(false\\);`],
          failMsg: "Убедитесь, что вы вывели логическое значение без кавычек",
        },
        {
          id: 4,
          label: "Выведите в консоль значение <code>undefined</code>",
          testRegExp: [`\console\\.log\\(undefined\\);`],
          failMsg: "Убедитесь, что вы вывели значение без кавычек",
        },
      ],
    },

    {
      id: 3,
      header: "Арифметические операции",
      url: "js-arithmetic",
      theory: ` <p>При написании скриптов вам непременно придется совершать много арифметических операций. Поэтому рассмотрим, какие арифметические операторы вам доступны в JavaScript. <em>Операторы</em> в целом - это символы, которые выполняют определенные задачи в коде. Арифметичесик операторы выполняют математические вычисления и операции с цифрами. Чаще всего используются следующие:</p>
      <ul>
        <li><code>+</code> - оператор сложения</li>
        <li><code>-</code> - оператор вычитания</li>
        <li><code>*</code> - оператор умножения</li>
        <li><code>/</code> - оператор деления</li>
        <li><code>%</code> - оператор, вычисляющий остаток от деления</li>
      </ul>
      <p>Теперь посмотри, как использовать их в коде:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="number">2</span> + <span class="number">10</span>); <span class="comment">// выведет 12</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">5</span> - <span class="number">15</span>); <span class="comment">// выведет -10</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">10</span> * <span class="number">2.5</span>); <span class="comment">// выведет 25</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">10</span> / <span class="number">2</span>); <span class="comment">// выведет 5</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">25</span> % <span class="number">5</span>); <span class="comment">// выведет 0</span>
<span class="keyword">console</span>.<span class="function">log</span>(<span class="number">24</span> % <span class="number">5</span>); <span class="comment">// выведет 4</span>    
</pre></code>
 
<p>Обратите внимание на 2 вещи. Во-первых, вы можете выполнять вычисления прямо внутри круглых скобок выражения <code>console.log()</code>! Последовательность здесь такая - сначала вычисляется арифметическое выражение в скобках, потом результат вычисления выводится в консоль.</p>
<p>Также между арифметическим оператором и каждым из <em>операндов</em> (чисел, к которым применяются операторы) стоят знаки пробела. Это не обязательно, ваш код будет работать и без пробелов, но така запись улучшает читаемость кода.</p>
<p>Пара слов о работе оператора <code>%</code>. Он вычисляет целый остаток от деления левого операнда на правый . В примере выше <code>25</code> делится на <code>5</code> целое число раз (5 раз), поэтому остаток от деления равен <code>0</code>. Во втором случае <code>24</code> можно разделить на <code>5</code> только 4 раза, поэтому остаток от деления равен <code>24 - (20 / 5) = 4</code>.</p>     
      <p class="external-resource">Прочитать больше об <a href="https://developer.mozilla.org/ru/docs/conflicting/Web/JavaScript/Reference/Operators#сложение" target="_blank">арифметических операторах</a>.</p>`,
      goal: `Проведите арифметические вычисления`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль результат сложения чисел <code>-4</code> и <code>1</code>`,
          testRegExp: [`\console\\.log\\((-4\\s?\\+\\s?1|1\\s?\\+\\s?-4)\\);`],
          failMsg: "Убедитесь, что вы использовали оператор +",
        },
        {
          id: 2,
          label: "Выведите в консоль результат вычитания чисел <code>400</code> и <code>399</code>",
          testRegExp: [`\console\\.log\\(400\\s?\\-\\s?399\\);`],
          failMsg: "Убедитесь, что вы использовали оператор -",
        },
        {
          id: 3,
          label: "Выведите в консоль результат умножения чисел <code>40</code> и <code>0</code>",
          testRegExp: [`\console\\.log\\((40\\s?\\*\\s?0|0\\s?\\*\\s?40)\\);`],
          failMsg: "Убедитесь, что вы использовали оператор *",
        },
        {
          id: 4,
          label: "Выведите в консоль результат деления чисел <code>250</code> и <code>45</code>",
          testRegExp: [`\console\\.log\\(250\\s?\\/\\s?45\\);`],
          failMsg: "Убедитесь, что вы использовали оператор /",
        },
        {
          id: 5,
          label: "Выведите в консоль остаток от деления чисел <code>13</code> и <code>3</code>",
          testRegExp: [`\console\\.log\\(13\\s?\\%\\s?3\\);`],
          failMsg: "Убедитесь, что вы использовали оператор %",
        },
      ],
    },

    {
      id: 4,
      header: "Конкатенация строк",
      url: "js-string-concatenation",
      theory: ` <p>Арифметические операторы можно применять не только к числам. Например, с помощью оператора <code>+</code> можно соединять строки. Такая операция называется <em>конкатенацией строк</em>(string concatenation).</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Соединим"</span> + <span class="string">"три"</span> + <span class="string">"строки"</span>); <span class="comment">// выведет "Соединимтристроки"</span></pre></code>
 
<p>Обратите внимание, что итоговая строка не читаема. Это потому, что ни в одной из трех исходных строк нет пробельных символов, соответственно их нет и в соединенной строке. Это можно решить двумя способами:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Соединим "</span> + <span class="string">"три "</span> + <span class="string">"строки"</span>); <span class="comment">// выведет "Соединим три строки"</span></pre></code>

<p>Здесь мы добавили по одному пробельному символу к концу каждой из строк (кроме последней) и слова теперь разделены пробелами. Так лучше не делать, потому что это приводит к изменению исходных строк, что чаще всего не возможно или не желательно. Лучше сделать так:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Соединим"</span> + <span class="string">" "</span> + <span class="string">"три"</span> + <span class="string">" "</span> + <span class="string">"строки"</span>); <span class="comment">// выведет "Соединим три строки"</span></pre></code>

<p>В данном случае мы добавили в итоговую строку дополнительные строки, состоящие из пробельного символа. Пробел - такой же символ, как и все остальные и строка вполне может состоять из одного пробела <code>" "</code>.</p>`,
      goal: `Выполните сложение строк`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Использую конкатенацию строк выведите в консоль строку "Мне определенно нравится Javascript!". Пробелы должны быть отдельными строками, знак <code>!</code> также должен быть отдельной строкой.`,
          testRegExp: [
            `\console\\.log\\(("|'|\`)Мне("|'|\`)\\s?\\+\\s?("|'|\`) ("|'|\`)\\s?\\+\\s?("|'|\`)определенно("|'|\`)\\s?\\+\\s?("|'|\`) ("|'|\`)\\s?\\+\\s?("|'|\`)нравится("|'|\`)\\s?\\+\\s?("|'|\`) ("|'|\`)\\s?\\+\\s?("|'|\`)JavaScript("|'|\`)\\s?\\+\\s?("|'|\`)!("|'|\`)\\);`,
          ],
          failMsg: "Убедитесь, что вы сложили 8 строк в одну",
        },
      ],
    },

    {
      id: 5,
      header: "Свойства",
      url: "js-properties",
      theory: ` <p>Когда движок JavaScript видит в вашем скрипте какие-либо данные, он создает в памяти новый экземпляр данных определенного типа. Пусть к примеру вы написали в программе строку <code>"Я Иван"</code>. JavaScript "видит" эту строку и создает новый экземпляр данных типа <code>String</code> (строка).</p>
      <p>В этом экземпляре данных хранятся символы строки, а также другие <em>свойства</em>, которые описывают строку. Например, в экземпляре типа <code>String</code> есть свойство <code>length</code>, в котором хранится количество символов строки. Мы можем получить доступ к свойству вот так:</p>

<pre><code><span class="keyword">console</span>.<span class="function">log</span>(<span class="string">"Я Иван"</span>.<span class="function">length</span>); <span class="comment">// выведет 6</span></pre></code>
 
<p>Доступ к свойству осуществляется через точку <code>.</code>. Поскольку в строке <code>"Я Иван"</code> 6 символов (напоминаем, что пробел - такой же символ, как и все остальные), то в свойстве <code>length</code> хранится значение <code>6</code>.</p>
<p>Кстати, точка <code>.</code> - это тоже оператор и означает "доступ к чему-либо".</p>
<p>У разных тип данных свои свойста. Например, у чисел свойства <code>length</code> нет, там оно не имеет смысла для чисел.</p>

<p class="external-resource">Прочитать больше о <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/length" target="_blank">свойстве length</a>.</p>`,
      goal: `Узнайте длину строк`,
      initValues: {
        html: "",
        css: "",
        js: ``,
      },
      tasks: [
        {
          id: 1,
          label: `Выведите в консоль длину строки "Я узнал(a) о том, как использовать свойства в JavaScript."`,
          testRegExp: [
            `\console\\.log\\(("|'|\`)Я узнал о том, как использовать свойства в JavaScript.("|'|\`).length\\);`,
          ],
          failMsg: "Убедитесь, что вы указали свойство через точку",
        },
        {
          id: 2,
          label: `Выведите в консоль длину пустой строки.`,
          testRegExp: [
            `\console\\.log\\(("|'|\`){2}.length\\);`,
          ],
          failMsg: "Убедитесь, что в строке нет ни одного символа",
        },
      ],
    },
  ],
};
